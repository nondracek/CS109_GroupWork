{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CS 109A/STAT 121A/AC 209A/CSCI E-109A: Homework 1\n",
    "\n",
    "\n",
    "\n",
    "**Harvard University**<br/>\n",
    "**Fall 2017**<br/>\n",
    "**Instructors**: Pavlos Protopapas, Kevin Rader, Rahul Dave, Margo Levine\n",
    "\n",
    "---\n",
    "\n",
    "### INSTRUCTIONS\n",
    "\n",
    "**WARNING**: There is web page scraping in this homework. It takes about 40 minutes. **Do not wait till the last minute** to do this homework.\n",
    "\n",
    "- To submit your assignment follow the instructions given in canvas.\n",
    "- Restart the kernel and run the whole notebook again before you submit. There is an important CAVEAT to this. DO NOT run the web-page fetching cells again. (We have provided hints like `# DO NOT RERUN THIS CELL WHEN SUBMITTING` on some of the cells where we provide the code). Instead load your data structures from the JSON files we will ask you to save below. Otherwise you will be waiting for a long time. (Another reason to not wait until the last moment to submit.)\n",
    "\n",
    "- Do not include your name in the notebook.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 1: Rihanna or Mariah?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Billboard Magazine puts out a top 100 list of \"singles\" every week. Information from this list, as well as that from music sales, radio, and other sources is used to determine a top-100 \"singles\" of the year list. A **single** is typically one song, but sometimes can be two songs which are on one \"single\" record.\n",
    "\n",
    "In this homework you will: \n",
    "\n",
    "1. Scrape Wikipedia to obtain infprmation about the best singers and groups from each year (distinguishing between the two groups) as determined by the Billboard top 100 charts. You will have to clean this data. Along the way you will learn how to save data in json files to avoid repeated scraping. \n",
    "2. Scrape Wikipedia to obtain information on these singers. You will have to scrape the web pages, this time using a cache to guard against network timeouts (or your laptop going to sleep). You will again clean the data, and save it to a json file.\n",
    "3. Use pandas to represent these two datasets and merge them.\n",
    "4. Use the individual and merged datasets to visualize the performance of the artists and their songs. We have kept the amount of analysis limited here for reasons of time; but you might enjoy exploring music genres and other aspects of the music business you can find on these wikipedia pages at your own leisure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should have worked through Lab0 and Lab 1, and Lecture 2.  Lab 2 will help as well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual, first we import the necessary libraries.  In particular, we use [Seaborn](http://stanford.edu/~mwaskom/software/seaborn/) to give us a nicer default color palette, with our plots being of large (`poster`) size and with a white-grid background. "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 1,
=======
   "execution_count": 3,
>>>>>>> b7bd60b39652e54ed217efba0ab30fd26e9f93f2
   "metadata": {
    "collapsed": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import functools\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import matplotlib as mpl\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import time\n",
    "pd.set_option('display.width', 500)\n",
    "pd.set_option('display.max_columns', 100)\n",
    "pd.set_option('display.notebook_repr_html', True)\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Q1. Scraping Wikipedia for Billboard Top 100."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this question you will scrape Wikipedia for the Billboard's top 100 singles."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scraping Wikipedia for Billboard singles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll be using  [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/), and suggest that you use Python's built in `requests` library to fetch the web page."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1 Parsing the Billboard Wikipedia page for 1970"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obtain the web page at http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_1970 using a HTTP GET request. From this web page we'll extract the top 100 singles and their rankings. Create a list of dictionaries, 100 of them to be precise, with entries like \n",
    "\n",
    "`{'url': '/wiki/Sugarloaf_(band)', 'ranking': 30, 'band_singer': 'Sugarloaf', 'title': 'Green-Eyed Lady'}`. \n",
    "\n",
    "If you look at that web page, you'll see a link for every song, from which you can get the `url` of the singer or band. We will use these links later to scrape information about the singer or band. From the listing we can also get the band or singer name `band_singer`, and `title` of the song.\n",
    "\n",
    "*HINT: look for a table with class `wikitable`.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "You should get something similar to this (where songs is the aforementioned list):\n",
    "\n",
    "```\n",
    "songs[2:4]\n",
    "```\n",
    "\n",
    "```\n",
    "[{'band_singer': 'The Guess Who',\n",
    "  'ranking': 3,\n",
    "  'title': '\"American Woman\"',\n",
    "  'url': '/wiki/The_Guess_Who'},\n",
    " {'band_singer': 'B.J. Thomas',\n",
    "  'ranking': 4,\n",
    "  'title': '\"Raindrops Keep Fallin\\' on My Head\"',\n",
    "  'url': '/wiki/B.J._Thomas'}]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 2,
=======
   "execution_count": 4,
>>>>>>> b7bd60b39652e54ed217efba0ab30fd26e9f93f2
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from IPython.display import IFrame, HTML\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Get Wiki padge for 1970's top 100\n",
    "req = requests.get(\" http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_1970\")\n",
    "page = req.text\n",
    "# Use Beautiful Soup to convert the HTML\n",
    "soup = BeautifulSoup(page, 'html.parser')\n",
    "# The classes of all tables that have a class sttribute set on them\n",
    "[t[\"class\"] for t in soup.find_all(\"table\") if t.get(\"class\")]\n",
    "# Find the table with class-types 'sortable' and 'wikitable'\n",
    "dfinder = lambda tag: tag.name=='table' and tag.get('class') == ['wikitable', 'sortable']\n",
    "table_songs = soup.find_all(dfinder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'band_singer': u'Simon & Garfunkel',\n",
       "  'ranking': 1,\n",
       "  'title': u'\"Bridge over Troubled Water (song)\"',\n",
       "  'url': u'/wiki/Simon_%26_Garfunkel'},\n",
       " {'band_singer': u'The Carpenters',\n",
       "  'ranking': 2,\n",
       "  'title': u'\"(They Long to Be) Close to You\"',\n",
       "  'url': u'/wiki/The_Carpenters'},\n",
       " {'band_singer': u'The Guess Who',\n",
       "  'ranking': 3,\n",
       "  'title': u'\"American Woman\"',\n",
       "  'url': u'/wiki/The_Guess_Who'},\n",
       " {'band_singer': u'B.J. Thomas',\n",
       "  'ranking': 4,\n",
       "  'title': u'\"Raindrops Keep Fallin\\' on My Head\"',\n",
       "  'url': u'/wiki/B.J._Thomas'},\n",
       " {'band_singer': u'Edwin Starr',\n",
       "  'ranking': 5,\n",
       "  'title': u'\"War (The Temptations song)\"',\n",
       "  'url': u'/wiki/Edwin_Starr'},\n",
       " {'band_singer': u'Diana Ross',\n",
       "  'ranking': 6,\n",
       "  'title': u'\"Ain\\'t No Mountain High Enough\"',\n",
       "  'url': u'/wiki/Diana_Ross'},\n",
       " {'band_singer': u'The Jackson 5',\n",
       "  'ranking': 7,\n",
       "  'title': u'\"I\\'ll Be There (The Jackson 5 song)\"',\n",
       "  'url': u'/wiki/The_Jackson_5'},\n",
       " {'band_singer': u'Rare Earth',\n",
       "  'ranking': 8,\n",
       "  'title': u'\"Get Ready (The Temptations song)\"',\n",
       "  'url': u'/wiki/Rare_Earth_(band)'},\n",
       " {'band_singer': u'The Beatles',\n",
       "  'ranking': 9,\n",
       "  'title': u'\"Let It Be (song)\"',\n",
       "  'url': u'/wiki/The_Beatles'},\n",
       " {'band_singer': u'Freda Payne',\n",
       "  'ranking': 10,\n",
       "  'title': u'\"Band of Gold (Freda Payne song)\"',\n",
       "  'url': u'/wiki/Freda_Payne'},\n",
       " {'band_singer': u'Three Dog Night',\n",
       "  'ranking': 11,\n",
       "  'title': u'\"Mama Told Me Not to Come\"',\n",
       "  'url': u'/wiki/Three_Dog_Night'},\n",
       " {'band_singer': u'Ray Stevens',\n",
       "  'ranking': 12,\n",
       "  'title': u'\"Everything Is Beautiful\"',\n",
       "  'url': u'/wiki/Ray_Stevens'},\n",
       " {'band_singer': u'Bread',\n",
       "  'ranking': 13,\n",
       "  'title': u'\"Make It with You\"',\n",
       "  'url': u'/wiki/Bread_(band)'},\n",
       " {'band_singer': u'Vanity Fare',\n",
       "  'ranking': 14,\n",
       "  'title': u'\"Hitchin\\' a Ride (Vanity Fare song)\"',\n",
       "  'url': u'/wiki/Vanity_Fare'},\n",
       " {'band_singer': u'The Jackson 5',\n",
       "  'ranking': 15,\n",
       "  'title': u'\"ABC (The Jackson 5 song)\"',\n",
       "  'url': u'/wiki/The_Jackson_5'},\n",
       " {'band_singer': u'The Jackson 5',\n",
       "  'ranking': 16,\n",
       "  'title': u'\"The Love You Save\"',\n",
       "  'url': u'/wiki/The_Jackson_5'},\n",
       " {'band_singer': u'Neil Diamond',\n",
       "  'ranking': 17,\n",
       "  'title': u'\"Cracklin\\' Rosie\"',\n",
       "  'url': u'/wiki/Neil_Diamond'},\n",
       " {'band_singer': u'Dawn',\n",
       "  'ranking': 18,\n",
       "  'title': u'\"Candida (song)\"',\n",
       "  'url': u'/wiki/Tony_Orlando_and_Dawn'},\n",
       " {'band_singer': u'Sly & the Family Stone',\n",
       "  'ranking': 19,\n",
       "  'title': u'\"Thank You (Falettinme Be Mice Elf Agin)\"',\n",
       "  'url': u'/wiki/Sly_%26_the_Family_Stone'},\n",
       " {'band_singer': u'Eric Burdon & War',\n",
       "  'ranking': 20,\n",
       "  'title': u'\"Spill the Wine\"',\n",
       "  'url': u'/wiki/Eric_Burdon'},\n",
       " {'band_singer': u'Five Stairsteps',\n",
       "  'ranking': 21,\n",
       "  'title': u'\"O-o-h Child\"',\n",
       "  'url': u'/wiki/Five_Stairsteps'},\n",
       " {'band_singer': u'Norman Greenbaum',\n",
       "  'ranking': 22,\n",
       "  'title': u'\"Spirit in the Sky\"',\n",
       "  'url': u'/wiki/Norman_Greenbaum'},\n",
       " {'band_singer': u'Melanie',\n",
       "  'ranking': 23,\n",
       "  'title': u'\"Lay Down (Candles in the Rain)\"',\n",
       "  'url': u'/wiki/Melanie_Safka'},\n",
       " {'band_singer': u'The Temptations',\n",
       "  'ranking': 24,\n",
       "  'title': u'\"Ball of Confusion (That\\'s What the World Is Today)\"',\n",
       "  'url': u'/wiki/The_Temptations'},\n",
       " {'band_singer': u'The Moments',\n",
       "  'ranking': 25,\n",
       "  'title': u'\"Love on a Two-Way Street\"',\n",
       "  'url': u'/wiki/Ray,_Goodman_%26_Brown'},\n",
       " {'band_singer': u'The Poppy Family',\n",
       "  'ranking': 26,\n",
       "  'title': u'\"Which Way You Goin\\' Billy? (song)\"',\n",
       "  'url': u'/wiki/The_Poppy_Family'},\n",
       " {'band_singer': u'Free',\n",
       "  'ranking': 27,\n",
       "  'title': u'\"All Right Now\"',\n",
       "  'url': u'/wiki/Free_(band)'},\n",
       " {'band_singer': u'The Jackson 5',\n",
       "  'ranking': 28,\n",
       "  'title': u'\"I Want You Back\"',\n",
       "  'url': u'/wiki/The_Jackson_5'},\n",
       " {'band_singer': u'Bobby Sherman',\n",
       "  'ranking': 29,\n",
       "  'title': u'\"Julie, Do Ya Love Me\"',\n",
       "  'url': u'/wiki/Bobby_Sherman'},\n",
       " {'band_singer': u'Sugarloaf',\n",
       "  'ranking': 30,\n",
       "  'title': u'\"Green-Eyed Lady\"',\n",
       "  'url': u'/wiki/Sugarloaf_(band)'},\n",
       " {'band_singer': u'Stevie Wonder',\n",
       "  'ranking': 31,\n",
       "  'title': u'\"Signed, Sealed, Delivered I\\'m Yours\"',\n",
       "  'url': u'/wiki/Stevie_Wonder'},\n",
       " {'band_singer': u'Blues Image',\n",
       "  'ranking': 32,\n",
       "  'title': u'\"Ride Captain Ride\"',\n",
       "  'url': u'/wiki/Blues_Image'},\n",
       " {'band_singer': u'Shocking Blue',\n",
       "  'ranking': 33,\n",
       "  'title': u'\"Venus (Shocking Blue song)\"',\n",
       "  'url': u'/wiki/Shocking_Blue'},\n",
       " {'band_singer': u'John Lennon',\n",
       "  'ranking': 34,\n",
       "  'title': u'\"Instant Karma!\"',\n",
       "  'url': u'/wiki/John_Lennon'},\n",
       " {'band_singer': u'Clarence Carter',\n",
       "  'ranking': 35,\n",
       "  'title': u'\"Patches (Chairmen of the Board song)\"',\n",
       "  'url': u'/wiki/Clarence_Carter'},\n",
       " {'band_singer': u'Creedence Clearwater Revival',\n",
       "  'ranking': 36,\n",
       "  'title': u'\"Lookin\\' out My Back Door\"',\n",
       "  'url': u'/wiki/Creedence_Clearwater_Revival'},\n",
       " {'band_singer': u'Brook Benton',\n",
       "  'ranking': 37,\n",
       "  'title': u'\"Rainy Night in Georgia\"',\n",
       "  'url': u'/wiki/Brook_Benton'},\n",
       " {'band_singer': u'Kenny Rogers & The First Edition',\n",
       "  'ranking': 38,\n",
       "  'title': u'\\'\"Something\\'s Burning\"\\'',\n",
       "  'url': u'/wiki/Kenny_Rogers'},\n",
       " {'band_singer': u'Chairmen of the Board',\n",
       "  'ranking': 39,\n",
       "  'title': u'\"Give Me Just a Little More Time\"',\n",
       "  'url': u'/wiki/Chairmen_of_the_Board'},\n",
       " {'band_singer': u'Edison Lighthouse',\n",
       "  'ranking': 40,\n",
       "  'title': u'\"Love Grows (Where My Rosemary Goes)\"',\n",
       "  'url': u'/wiki/Edison_Lighthouse'},\n",
       " {'band_singer': u'The Beatles',\n",
       "  'ranking': 41,\n",
       "  'title': u'\"The Long and Winding Road\"',\n",
       "  'url': u'/wiki/The_Beatles'},\n",
       " {'band_singer': u'Anne Murray',\n",
       "  'ranking': 42,\n",
       "  'title': u'\"Snowbird (song)\"',\n",
       "  'url': u'/wiki/Anne_Murray'},\n",
       " {'band_singer': u'Marmalade',\n",
       "  'ranking': 43,\n",
       "  'title': u'\"Reflections of My Life\"',\n",
       "  'url': u'/wiki/Marmalade_(band)'},\n",
       " {'band_singer': u'Eddie Holman',\n",
       "  'ranking': 44,\n",
       "  'title': u'\"Hey There Lonely Girl\"',\n",
       "  'url': u'/wiki/Eddie_Holman'},\n",
       " {'band_singer': u'The Jaggerz',\n",
       "  'ranking': 45,\n",
       "  'title': u'\"The Rapper\"',\n",
       "  'url': u'/wiki/The_Jaggerz'},\n",
       " {'band_singer': u'The Hollies',\n",
       "  'ranking': 46,\n",
       "  'title': u'\"He Ain\\'t Heavy, He\\'s My Brother\"',\n",
       "  'url': u'/wiki/The_Hollies'},\n",
       " {'band_singer': u\"Alive N Kickin'\",\n",
       "  'ranking': 47,\n",
       "  'title': u'\"Tighter, Tighter\"',\n",
       "  'url': u'/wiki/Alive_N_Kickin%27'},\n",
       " {'band_singer': u'Badfinger',\n",
       "  'ranking': 48,\n",
       "  'title': u'\"Come and Get It (Badfinger song)\"',\n",
       "  'url': u'/wiki/Badfinger'},\n",
       " {'band_singer': u'Simon & Garfunkel',\n",
       "  'ranking': 49,\n",
       "  'title': u'\"Cecilia (Simon & Garfunkel song)\"',\n",
       "  'url': u'/wiki/Simon_%26_Garfunkel'},\n",
       " {'band_singer': u'Charles Wright & the Watts 103rd Street Rhythm Band',\n",
       "  'ranking': 50,\n",
       "  'title': u'\"Love Land (song)\"',\n",
       "  'url': u'/wiki/Charles_Wright_%26_the_Watts_103rd_Street_Rhythm_Band'},\n",
       " {'band_singer': u'Tyrone Davis',\n",
       "  'ranking': 51,\n",
       "  'title': u'\"Turn Back the Hands of Time (song)\"',\n",
       "  'url': u'/wiki/Tyrone_Davis'},\n",
       " {'band_singer': u'The Kinks',\n",
       "  'ranking': 52,\n",
       "  'title': u'\"Lola (song)\"',\n",
       "  'url': u'/wiki/The_Kinks'},\n",
       " {'band_singer': u'Mungo Jerry',\n",
       "  'ranking': 53,\n",
       "  'title': u'\"In the Summertime (Mungo Jerry song)\"',\n",
       "  'url': u'/wiki/Mungo_Jerry'},\n",
       " {'band_singer': u'R. Dean Taylor',\n",
       "  'ranking': 54,\n",
       "  'title': u'\"Indiana Wants Me\"',\n",
       "  'url': u'/wiki/R._Dean_Taylor'},\n",
       " {'band_singer': u'Rare Earth',\n",
       "  'ranking': 55,\n",
       "  'title': u'\"(I Know) I\\'m Losing You\"',\n",
       "  'url': u'/wiki/Rare_Earth_(band)'},\n",
       " {'band_singer': u'Bobby Sherman',\n",
       "  'ranking': 56,\n",
       "  'title': u'\"Easy Come, Easy Go (Bobby Sherman song)\"',\n",
       "  'url': u'/wiki/Bobby_Sherman'},\n",
       " {'band_singer': u'Charles Wright & the Watts 103rd Street Rhythm Band',\n",
       "  'ranking': 57,\n",
       "  'title': u'\"Express Yourself (Charles Wright & the Watts 103rd Street Rhythm Band song)\"',\n",
       "  'url': u'/wiki/Charles_Wright_%26_the_Watts_103rd_Street_Rhythm_Band'},\n",
       " {'band_singer': u'The Four Tops',\n",
       "  'ranking': 58,\n",
       "  'title': u'\"Still Water (Love)\"',\n",
       "  'url': u'/wiki/The_Four_Tops'},\n",
       " {'band_singer': u'Chicago',\n",
       "  'ranking': 59,\n",
       "  'title': u'\"Make Me Smile\"',\n",
       "  'url': u'/wiki/Chicago_(band)'},\n",
       " {'band_singer': u'Frijid Pink',\n",
       "  'ranking': 60,\n",
       "  'title': u'\"The House of the Rising Sun\"',\n",
       "  'url': u'/wiki/Frijid_Pink'},\n",
       " {'band_singer': u'Chicago',\n",
       "  'ranking': 61,\n",
       "  'title': u'\"25 or 6 to 4\"',\n",
       "  'url': u'/wiki/Chicago_(band)'},\n",
       " {'band_singer': u'White Plains',\n",
       "  'ranking': 62,\n",
       "  'title': u'\"My Baby Loves Lovin\\'\"',\n",
       "  'url': u'/wiki/White_Plains_(band)'},\n",
       " {'band_singer': u'The Friends of Distinction',\n",
       "  'ranking': 63,\n",
       "  'title': u'\"Love or Let Me Be Lonely\"',\n",
       "  'url': u'/wiki/The_Friends_of_Distinction'},\n",
       " {'band_singer': u'The Brotherhood of Man',\n",
       "  'ranking': 64,\n",
       "  'title': u'\"United We Stand (song)\"',\n",
       "  'url': u'/wiki/The_Brotherhood_of_Man'},\n",
       " {'band_singer': u'The Carpenters',\n",
       "  'ranking': 65,\n",
       "  'title': u'\"We\\'ve Only Just Begun\"',\n",
       "  'url': u'/wiki/The_Carpenters'},\n",
       " {'band_singer': u'Mark Lindsay',\n",
       "  'ranking': 66,\n",
       "  'title': u'\"Arizona (song)\"',\n",
       "  'url': u'/wiki/Mark_Lindsay'},\n",
       " {'band_singer': u'James Taylor',\n",
       "  'ranking': 67,\n",
       "  'title': u'\"Fire and Rain (song)\"',\n",
       "  'url': u'/wiki/James_Taylor'},\n",
       " {'band_singer': u'Gene Chandler',\n",
       "  'ranking': 68,\n",
       "  'title': u'\"Groovy Situation\"',\n",
       "  'url': u'/wiki/Gene_Chandler'},\n",
       " {'band_singer': u'Santana',\n",
       "  'ranking': 69,\n",
       "  'title': u'\"Evil Ways\"',\n",
       "  'url': u'/wiki/Santana_(band)'},\n",
       " {'band_singer': u'The Guess Who',\n",
       "  'ranking': 70,\n",
       "  'title': u'\"No Time (The Guess Who song)\"',\n",
       "  'url': u'/wiki/The_Guess_Who'},\n",
       " {'band_singer': u'The Delfonics',\n",
       "  'ranking': 71,\n",
       "  'title': u'\"Didn\\'t I (Blow Your Mind This Time)\"',\n",
       "  'url': u'/wiki/The_Delfonics'},\n",
       " {'band_singer': u'Elvis Presley',\n",
       "  'ranking': 72,\n",
       "  'title': u'\"The Wonder of You\"',\n",
       "  'url': u'/wiki/Elvis_Presley'},\n",
       " {'band_singer': u'Creedence Clearwater Revival',\n",
       "  'ranking': 73,\n",
       "  'title': u'\"Up Around the Bend\"',\n",
       "  'url': u'/wiki/Creedence_Clearwater_Revival'},\n",
       " {'band_singer': u'Ronnie Dyson',\n",
       "  'ranking': 74,\n",
       "  'title': u'\"(If You Let Me Make Love To You Then) Why Can\\'t I Touch You?\"',\n",
       "  'url': u'/wiki/Ronnie_Dyson'},\n",
       " {'band_singer': u'B.J. Thomas',\n",
       "  'ranking': 75,\n",
       "  'title': u'\"I Just Can\\'t Help Believing\"',\n",
       "  'url': u'/wiki/B.J._Thomas'},\n",
       " {'band_singer': u'The Spinners',\n",
       "  'ranking': 76,\n",
       "  'title': u'\"It\\'s a Shame (The Spinners song)\"',\n",
       "  'url': u'/wiki/The_Spinners_(American_band)'},\n",
       " {'band_singer': u'Bobbi Martin',\n",
       "  'ranking': 77,\n",
       "  'title': u'\"For the Love of Him\"',\n",
       "  'url': u'/wiki/Bobbi_Martin'},\n",
       " {'band_singer': u'Mountain',\n",
       "  'ranking': 78,\n",
       "  'title': u'\"Mississippi Queen\"',\n",
       "  'url': u'/wiki/Mountain_(band)'},\n",
       " {'band_singer': u'Ike & Tina Turner',\n",
       "  'ranking': 79,\n",
       "  'title': u'\"I Want to Take You Higher\"',\n",
       "  'url': u'/wiki/Ike_%26_Tina_Turner'},\n",
       " {'band_singer': u'Joe Cocker',\n",
       "  'ranking': 80,\n",
       "  'title': u'\"The Letter (The Box Tops song)\"',\n",
       "  'url': u'/wiki/Joe_Cocker'},\n",
       " {'band_singer': u'Tee Set',\n",
       "  'ranking': 81,\n",
       "  'title': u'\"Ma Belle Amie\"',\n",
       "  'url': u'/wiki/Tee_Set'},\n",
       " {'band_singer': u'The Originals',\n",
       "  'ranking': 82,\n",
       "  'title': u'\"The Bells (The Originals song)\"',\n",
       "  'url': u'/wiki/The_Originals_(band)'},\n",
       " {'band_singer': u'Christie',\n",
       "  'ranking': 83,\n",
       "  'title': u'\"Yellow River (song)\"',\n",
       "  'url': u'/wiki/Christie_(band)'},\n",
       " {'band_singer': u'100 Proof (Aged in Soul)',\n",
       "  'ranking': 84,\n",
       "  'title': u'\"Somebody\\'s Been Sleeping\"',\n",
       "  'url': u'/wiki/100_Proof_(Aged_in_Soul)'},\n",
       " {'band_singer': u'The Ides of March',\n",
       "  'ranking': 85,\n",
       "  'title': u'\"Vehicle (song)\"',\n",
       "  'url': u'/wiki/The_Ides_of_March_(band)'},\n",
       " {'band_singer': u'The Pipkins',\n",
       "  'ranking': 86,\n",
       "  'title': u'\"Gimme Dat Ding (song)\"',\n",
       "  'url': u'/wiki/The_Pipkins'},\n",
       " {'band_singer': u'Robin McNamara',\n",
       "  'ranking': 87,\n",
       "  'title': u'\"Lay a Little Lovin\\' on Me\"',\n",
       "  'url': u'/wiki/Robin_McNamara'},\n",
       " {'band_singer': u'The Supremes',\n",
       "  'ranking': 88,\n",
       "  'title': u'\"Up the Ladder to the Roof\"',\n",
       "  'url': u'/wiki/The_Supremes'},\n",
       " {'band_singer': u'Creedence Clearwater Revival',\n",
       "  'ranking': 89,\n",
       "  'title': u'\"Travelin\\' Band\"',\n",
       "  'url': u'/wiki/Creedence_Clearwater_Revival'},\n",
       " {'band_singer': u'The Sandpipers',\n",
       "  'ranking': 90,\n",
       "  'title': u'\"Come Saturday Morning (song)\"',\n",
       "  'url': u'/wiki/The_Sandpipers'},\n",
       " {'band_singer': u'The Temptations',\n",
       "  'ranking': 91,\n",
       "  'title': u'\"Psychedelic Shack (song)\"',\n",
       "  'url': u'/wiki/The_Temptations'},\n",
       " {'band_singer': u'Tom Jones',\n",
       "  'ranking': 92,\n",
       "  'title': u'\"Without Love (There Is Nothing)\"',\n",
       "  'url': u'/wiki/Tom_Jones_(singer)'},\n",
       " {'band_singer': u'Pacific Gas & Electric',\n",
       "  'ranking': 93,\n",
       "  'title': u'\"Are You Ready? (Pacific Gas & Electric song)\"',\n",
       "  'url': u'/wiki/Pacific_Gas_%26_Electric_(band)'},\n",
       " {'band_singer': u'Crosby, Stills, Nash & Young',\n",
       "  'ranking': 94,\n",
       "  'title': u'\"Woodstock (song)\"',\n",
       "  'url': u'/wiki/Crosby,_Stills,_Nash_%26_Young'},\n",
       " {'band_singer': u'Dionne Warwick',\n",
       "  'ranking': 95,\n",
       "  'title': u'\"I\\'ll Never Fall in Love Again\"',\n",
       "  'url': u'/wiki/Dionne_Warwick'},\n",
       " {'band_singer': u'The New Seekers',\n",
       "  'ranking': 96,\n",
       "  'title': u'\\'\"Look What They\\'ve Done to My Song Ma\"\\'',\n",
       "  'url': u'/wiki/The_New_Seekers'},\n",
       " {'band_singer': u'Joe South',\n",
       "  'ranking': 97,\n",
       "  'title': u'\"Walk A Mile In My Shoes\"',\n",
       "  'url': u'/wiki/Joe_South'},\n",
       " {'band_singer': u'B.B. King',\n",
       "  'ranking': 98,\n",
       "  'title': u'\"The Thrill Is Gone (1951 song)\"',\n",
       "  'url': u'/wiki/B.B._King'},\n",
       " {'band_singer': u'Glen Campbell',\n",
       "  'ranking': 99,\n",
       "  'title': u'\"It\\'s Only Make Believe\"',\n",
       "  'url': u'/wiki/Glen_Campbell'},\n",
       " {'band_singer': u'Aretha Franklin',\n",
       "  'ranking': 100,\n",
       "  'title': u'\"Call Me (Aretha Franklin song)\"',\n",
       "  'url': u'/wiki/Aretha_Franklin'}]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract rows from table_demographics\n",
    "rows = [row for row in table_songs[0].find_all(\"tr\")]\n",
    "\n",
    "# Insert table data into dictionary\n",
    "songs = []\n",
    "for row in rows[1:]:\n",
    "    entries = row.find_all(\"td\")\n",
    "    if entries[1].find(\"a\"): \n",
    "        songEntry = {'band_singer': entries[2].text, 'ranking': int(entries[0].text), \n",
    "                 'title': ('\"' + entries[1].find(\"a\").get(\"title\") + '\"'), 'url': entries[2].find(\"a\").get(\"href\")}\n",
    "    # if song doesn't have URL\n",
    "    else:\n",
    "        songEntry = {'band_singer': entries[2].text, 'ranking': int(entries[0].text), \n",
    "                 'title': (\"'\" + entries[1].text + \"'\"), 'url': entries[2].find(\"a\").get(\"href\")}\n",
    "    songs.append(songEntry)\n",
    "songs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2 Generalize the previous: scrape Wikipedia from 1992 to 2014"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By visiting the urls similar to the ones for 1970, we can obtain the billboard top 100 for the years 1992 to 2014. (We choose these later years rather than 1970 as you might find music from this era more interesting.) Download these using Python's `requests` module and store the text from those requests in a dictionary called `yearstext`. This dictionary ought to have as its keys the years (as integers from 1992 to 2014), and as values corresponding to these keys the text of the page being fetched.\n",
    "\n",
    "You ought to sleep a second (look up `time.sleep` in Python) at the very least in-between fetching each web page: you do not want Wikipedia to think you are a marauding bot attempting to mount a denial-of-service attack."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*HINT: you might find `range` and string-interpolation useful to construct the URLs *.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "years = range(1992, 2015)\n",
    "text = []\n",
    "for year in range(1992, 2015):\n",
    "    req = requests.get(\" http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_\" + str(year))\n",
    "    text.append(req.text)\n",
    "    time.sleep(1)\n",
    "yearstext = dict(zip(years,text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.3 Parse and Clean data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember the code you wrote to get data from 1970 which produces a list of dictionaries, one corresponding to each single.  Now write a function `parse_year(the_year, yeartext_dict)` which takes the year, prints it out, gets the text for the year from the just created `yearstext` dictionary, and return a list of dictionaries for that year, with one dictionary for each single. Store this list in the variable `yearinfo`.\n",
    "\n",
    "The dictionaries **must** be of this form:\n",
    "\n",
    "```\n",
    "{'band_singer': ['Brandy', 'Monica'],\n",
    "  'ranking': 2,\n",
    "  'song': ['The Boy Is Mine'],\n",
    "  'songurl': ['/wiki/The_Boy_Is_Mine_(song)'],\n",
    "  'titletext': '\" The Boy Is Mine \"',\n",
    "  'url': ['/wiki/Brandy_Norwood', '/wiki/Monica_(entertainer)']}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The spec of this function is provided below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function\n",
    "--------\n",
    "parse_year\n",
    "\n",
    "Inputs\n",
    "------\n",
    "the_year: the year you want the singles for\n",
    "yeartext_dict: a dictionary with keys as integer years and values the downloaded web pages \n",
    "    from wikipedia for that year.\n",
    "   \n",
    "Returns\n",
    "-------\n",
    "\n",
    "a list of dictionaries, each of which corresponds to a single and has the\n",
    "following data:\n",
    "\n",
    "Eg:\n",
    "\n",
    "{'band_singer': ['Brandy', 'Monica'],\n",
    "  'ranking': 2,\n",
    "  'song': ['The Boy Is Mine'],\n",
    "  'songurl': ['/wiki/The_Boy_Is_Mine_(song)'],\n",
    "  'titletext': '\" The Boy Is Mine \"',\n",
    "  'url': ['/wiki/Brandy_Norwood', '/wiki/Monica_(entertainer)']}\n",
    "  \n",
    "A dictionary with the following data:\n",
    "    band_singer: a list of bands/singers who made this single\n",
    "    song: a list of the titles of songs on this single\n",
    "    songurl: a list of the same size as song which has urls for the songs on the single \n",
    "        (see point 3 above)\n",
    "    ranking: ranking of the single\n",
    "    titletext: the contents of the table cell\n",
    "    band_singer: a list of bands or singers on this single\n",
    "    url: a list of wikipedia singer/band urls on this single: only put in the part \n",
    "        of the url from /wiki onwards\n",
    "    \n",
    "\n",
    "Notes\n",
    "-----\n",
    "See description and example above.\n",
    "\"\"\"\n",
    "def parse_year(the_year, yeartext_dict):\n",
    "    page =  yeartext_dict[the_year]\n",
    "    soup = BeautifulSoup(page, 'html.parser')\n",
    "    # Find the table with class-types 'sortable' and 'wikitable'\n",
    "    table_songs = soup.find_all(dfinder)\n",
    "    # Extract rows from table_demographics\n",
    "    rows = [row for row in table_songs[0].find_all(\"tr\")]\n",
    "    # Insert table data into dictionary\n",
    "    songs = []\n",
    "    counter = 0\n",
    "    for row in rows[1:]:\n",
    "        counter += 1\n",
    "        entries = row.find_all(\"td\")\n",
    "        # if song has URL\n",
    "        if entries[0].find(\"a\"):\n",
    "            songurl = list(map(lambda x: x.get(\"href\"), entries[0].find_all(\"a\")))\n",
    "            song = list(map(lambda x: x.text, entries[0].find_all(\"a\")))\n",
    "            titletext = functools.reduce((lambda x, y: x +\" / \"+ y), (list(map(lambda x: '\"'+ x.get(\"title\") +'\"', entries[0].find_all(\"a\")))))\n",
    "        else: \n",
    "            songurl = [None]\n",
    "            song = [entries[0].text.replace('\"', '')]\n",
    "            titletext = [entries[0].text]\n",
    "        # if artist has URL     \n",
    "        if entries[1].find(\"a\"):\n",
    "            url = list(map(lambda x: x.get(\"href\"), entries[1].find_all(\"a\")))\n",
    "            band_singer = list(map(lambda x: x.text, entries[1].find_all(\"a\")))\n",
    "        else: \n",
    "            url = [None]\n",
    "            band_singer = [entries[1].text]\n",
    "        songEntry = {'band_singer': band_singer,'ranking': counter,'song': song,'songurl': songurl,'titletext': titletext,'url': url}\n",
    "        songs.append(songEntry)\n",
    "    return songs\n",
    "    \n",
    "yearinfo = []\n",
    "\n",
    "for year in years:\n",
    "    info = parse_year(year, yearstext)\n",
    "    yearinfo.append(info)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Helpful notes\n",
    "\n",
    "Notice that some singles might have multiple songs:\n",
    "\n",
    "```\n",
    "{'band_singer': ['Jewel'],\n",
    "  'ranking': 2,\n",
    "  'song': ['Foolish Games', 'You Were Meant for Me'],\n",
    "  'songurl': ['/wiki/Foolish_Games',\n",
    "   '/wiki/You_Were_Meant_for_Me_(Jewel_song)'],\n",
    "  'titletext': '\" Foolish Games \" / \" You Were Meant for Me \"',\n",
    "  'url': ['/wiki/Jewel_(singer)']}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And some singles don't have a song URL:\n",
    "\n",
    "```\n",
    "{'band_singer': [u'Nu Flavor'],\n",
    "  'ranking': 91,\n",
    "  'song': [u'Heaven'],\n",
    "  'songurl': [None],\n",
    "  'titletext': u'\"Heaven\"',\n",
    "  'url': [u'/wiki/Nu_Flavor']}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus there are some issues this function must handle:\n",
    "\n",
    "1. There can be more than one  `band_singer` as can be seen above (sometimes with a comma, sometimes with \"featuring\" in between). The best way to parse these is to look for the urls.\n",
    "2. There can be two songs in a single, because of the way the industry works: there are two-sided singles. See https://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_1997 for an example. You can find other examples in 1998 and 1999.\n",
    "3. The `titletext` is the contents of the table cell, and retains the quotes that Wikipedia puts on the single.\n",
    "4. If no song anchor is found (see the 24th song in the above url), assume there is one song in the single, set `songurl` to [`None`] and the song name to the contents of the table cell with the quotes stripped (ie `song` is a one-element list with this the `titletext` stripped of its quotes)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a check, we can do this for 1997. We'll print the first 5 outputs: `parse_year(1997, yearstext)[:5]`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This should give the following. Notice that the year 1997 exercises the edge cases we talked about earlier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "[{'band_singer': ['Elton John'],\n",
    "  'ranking': 1,\n",
    "  'song': ['Something About the Way You Look Tonight',\n",
    "   'Candle in the Wind 1997'],\n",
    "  'songurl': ['/wiki/Something_About_the_Way_You_Look_Tonight',\n",
    "   '/wiki/Candle_in_the_Wind_1997'],\n",
    "  'titletext': '\" Something About the Way You Look Tonight \" / \" Candle in the Wind 1997 \"',\n",
    "  'url': ['/wiki/Elton_John']},\n",
    " {'band_singer': ['Jewel'],\n",
    "  'ranking': 2,\n",
    "  'song': ['Foolish Games', 'You Were Meant for Me'],\n",
    "  'songurl': ['/wiki/Foolish_Games',\n",
    "   '/wiki/You_Were_Meant_for_Me_(Jewel_song)'],\n",
    "  'titletext': '\" Foolish Games \" / \" You Were Meant for Me \"',\n",
    "  'url': ['/wiki/Jewel_(singer)']},\n",
    " {'band_singer': ['Puff Daddy', 'Faith Evans', '112'],\n",
    "  'ranking': 3,\n",
    "  'song': [\"I'll Be Missing You\"],\n",
    "  'songurl': ['/wiki/I%27ll_Be_Missing_You'],\n",
    "  'titletext': '\" I\\'ll Be Missing You \"',\n",
    "  'url': ['/wiki/Sean_Combs', '/wiki/Faith_Evans', '/wiki/112_(band)']},\n",
    " {'band_singer': ['Toni Braxton'],\n",
    "  'ranking': 4,\n",
    "  'song': ['Un-Break My Heart'],\n",
    "  'songurl': ['/wiki/Un-Break_My_Heart'],\n",
    "  'titletext': '\" Un-Break My Heart \"',\n",
    "  'url': ['/wiki/Toni_Braxton']},\n",
    " {'band_singer': ['Puff Daddy', 'Mase'],\n",
    "  'ranking': 5,\n",
    "  'song': [\"Can't Nobody Hold Me Down\"],\n",
    "  'songurl': ['/wiki/Can%27t_Nobody_Hold_Me_Down'],\n",
    "  'titletext': '\" Can\\'t Nobody Hold Me Down \"',\n",
    "  'url': ['/wiki/Sean_Combs', '/wiki/Mase']}]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'band_singer': [u'Elton John'],\n",
       "  'ranking': 1,\n",
       "  'song': [u'Something About the Way You Look Tonight',\n",
       "   u'Candle in the Wind 1997'],\n",
       "  'songurl': [u'/wiki/Something_About_the_Way_You_Look_Tonight',\n",
       "   u'/wiki/Candle_in_the_Wind_1997'],\n",
       "  'titletext': u'\"Something About the Way You Look Tonight\" / \"Candle in the Wind 1997\"',\n",
       "  'url': [u'/wiki/Elton_John']},\n",
       " {'band_singer': [u'Jewel'],\n",
       "  'ranking': 2,\n",
       "  'song': [u'Foolish Games', u'You Were Meant for Me'],\n",
       "  'songurl': [u'/wiki/Foolish_Games',\n",
       "   u'/wiki/You_Were_Meant_for_Me_(Jewel_song)'],\n",
       "  'titletext': u'\"Foolish Games\" / \"You Were Meant for Me (Jewel song)\"',\n",
       "  'url': [u'/wiki/Jewel_(singer)']},\n",
       " {'band_singer': [u'Puff Daddy', u'Faith Evans', u'112'],\n",
       "  'ranking': 3,\n",
       "  'song': [u\"I'll Be Missing You\"],\n",
       "  'songurl': [u'/wiki/I%27ll_Be_Missing_You'],\n",
       "  'titletext': u'\"I\\'ll Be Missing You\"',\n",
       "  'url': [u'/wiki/Sean_Combs', u'/wiki/Faith_Evans', u'/wiki/112_(band)']},\n",
       " {'band_singer': [u'Toni Braxton'],\n",
       "  'ranking': 4,\n",
       "  'song': [u'Un-Break My Heart'],\n",
       "  'songurl': [u'/wiki/Un-Break_My_Heart'],\n",
       "  'titletext': u'\"Un-Break My Heart\"',\n",
       "  'url': [u'/wiki/Toni_Braxton']},\n",
       " {'band_singer': [u'Puff Daddy', u'Mase'],\n",
       "  'ranking': 5,\n",
       "  'song': [u\"Can't Nobody Hold Me Down\"],\n",
       "  'songurl': [u'/wiki/Can%27t_Nobody_Hold_Me_Down'],\n",
       "  'titletext': u'\"Can\\'t Nobody Hold Me Down\"',\n",
       "  'url': [u'/wiki/Sean_Combs', u'/wiki/Mase']}]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parse_year(1997, yearstext)[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Save a json file of information from the scraped files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We do not want to lose all this work, so let's save the last data structure we created to disk. That way if you need to re-run from here, you don't need to redo all these requests and parsing. \n",
    "\n",
    "DO NOT RERUN THE HTTP REQUESTS TO WIKIPEDIA WHEN SUBMITTING.\n",
    "\n",
    "*We **DO NOT** need to see these JSON files in your submission!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# DO NOT RERUN THIS CELL WHEN SUBMITTING\n",
    "fd = open(\"yearinfo.json\",\"w\")\n",
    "json.dump(yearinfo, fd)\n",
    "fd.close()\n",
    "del yearinfo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's reload our JSON file into the yearinfo variable, just to be sure everything is working."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# RERUN WHEN SUBMITTING\n",
    "# Another way to deal with files. Has the advantage of closing the file for you.\n",
    "with open(\"yearinfo.json\", \"r\") as fd:\n",
    "    yearinfo = json.load(fd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.4 Construct a year-song-singer dataframe from the yearly information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's construct a dataframe `flatframe` from the `yearinfo`. The frame should be similar to the frame below.  Each row of the frame represents a song, and carries with it the chief properties of year, song, singer, and ranking.\n",
    "\n",
    "![](https://raw.githubusercontent.com/cs109/a-2017/master/hwassets/images/HW1SC1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To construct the dataframe, we'll need to iterate over the years and the singles per year. Notice how, above, the dataframe is ordered by ranking and then year. While the exact order is up to you, note that you will have to come up with a scheme to order the information.\n",
    "\n",
    "Check that the dataframe has sensible data types. You will also likely find that the year field has become an \"object\" (Pandas treats strings as generic objects): this is due to the conversion to and back from JSON. Such conversions need special care. Fix any data type issues with `flatframe`. (See Pandas [astype](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html) function.) \n",
    "We will use this `flatframe` in the next question. \n",
    "\n",
    "(As an aside, we used the name `flatframe` to indicate that this dataframe is flattened from a hierarchical dictionary structure with the keys being the years.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Rebuild yearinfo as a list of list of dictionaries that can be easily read into a data frame\n",
    "new_yearinfo = []\n",
    "# loop through every singer, for every song, of every year\n",
    "for year in range(len(yearinfo)): \n",
    "    yearEntry = []\n",
    "    for rank in range(len(yearinfo[1])):\n",
    "        counter = 0\n",
    "        for singer in yearinfo[year][rank]['band_singer']:\n",
    "            # rebuild dictionary entry in usable format for dataframe\n",
    "            date = year + 1992\n",
    "            ranking = rank + 1\n",
    "            song = yearinfo[year][rank]['song'][0]\n",
    "            url = yearinfo[year][rank]['url'][counter]\n",
    "            counter += 1\n",
    "            entry = {'year': date, 'band_singer': singer, 'song': song, 'url': url, 'ranking' : ranking}\n",
    "            yearEntry.append(entry)\n",
    "    new_yearinfo.append(yearEntry)\n",
    "\n",
    "# build base datframe from 1992\n",
    "flatframe = pd.DataFrame.from_dict(new_yearinfo[0])\n",
    "# append to dataframe additional years\n",
    "for i in range(1, len(new_yearinfo)):\n",
    "    flatframe = flatframe.append(pd.DataFrame.from_dict(new_yearinfo[i]), ignore_index=True)\n",
    "    \n",
    "# sort by ranking and year, and re-index and change column order\n",
    "flatframe = df.sort_values(by=['ranking', 'year']).reset_index(drop=True)[\n",
    "    ['year', 'band_singer', 'ranking', 'song', 'url']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Who are the highest quality singers?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we show the highest quality singers and plot them on a bar chart.\n",
    "\n",
    "#### 1.5 Find highest quality singers according to how prolific they are\n",
    "\n",
    "What do we mean by highest quality? This is of course open to interpretation, but let's define \"highest quality\" here as the number of times a singer appears in the top 100 over this time period. If a singer appears twice in a year (for different songs), this is counted as two appearances, not one. \n",
    "\n",
    "Make a bar-plot of the most prolific singers. Singers on this chart should have appeared at-least more than 15 times. (HINT: look at the docs for the pandas method `value_counts`.)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nJEkaiv8HajrT5U9SeuQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x118fb96a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "singers = flatframe.band_singer.value_counts()\n",
    "best_singers = singers[singers > 15]\n",
    "\n",
    "with sns.plotting_context(\"poster\"):\n",
    "    ax = plt.gca()\n",
    "    best_singers.plot(kind=\"barh\")\n",
    "    plt.grid(axis = 'x', color ='white', linestyle='-')\n",
    "    ax.tick_params(axis='both', which='both',length=0)\n",
    "    sns.despine(left=True, bottom=True)\n",
    "    plt.title(\"Top Singers from 1992 to 2014\")\n",
    "    plt.ylabel(\"Artist\")\n",
    "    plt.xlabel(\"# of Top 100 Hits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.6 What if we used a different metric?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What we would like to capture is this: a singer should to be scored higher if the singer appears higher in the rankings. So we'd say that a singer who appeared once at a higher and once at a lower ranking is a \"higher quality\" singer than one who appeared twice at a lower ranking. \n",
    "\n",
    "To do this, group all of a singers songs together and assign each song a score `101 - ranking`. Order the singers by their total score and make a bar chart for the top 20.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABOIAAAMXCAYAAACXfvpiAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzs3XdUVFf7NuB76B1BRTQiRlGxggQVRcWKYEHsJgYFRY0p\ndmMJRCyxxp742gFbbATLq8YWUQIq+goqdiUgsYMgCEib8/3BN+cHTqEIg5j7WmvWwrPLefY5M+Oa\nZ+2zt0QQBAFERERERERERERUoTQqOwAiIiIiIiIiIqJ/AybiiIiIiIiIiIiI1ICJOCIiIiIiIiIi\nIjVgIo6IiIiIiIiIiEgNmIgjIiIiIiIiIiJSAybiiIiIiIiIiIiI1ICJOCIiIiIiIiIiIjVgIo6I\niIiIiIiIiEgNmIgjIiIiIiIiIiJSAybiiIiI/uXi4+MhkUje6xUWFlbZwyixnJwcHDt2DJMnT0b7\n9u1RvXp1aGtrw8zMDG3btoW/vz+ePHlS4v4OHTqE3r17w9LSEnp6erC2toa3tzdiYmLKLd7g4GD0\n69cPVlZW0NPTg66uLmrVqoX27dtj0qRJ+P3335GUlCTXNiYmRrxH5RUPqXbs2DG4ubnBwsICWlpa\nkEgkqFatWmWHVemeP3+Ow4cPw8/PD66urjAzMxPfm6tXry5xP9nZ2Vi/fj26dOmCGjVqQFdXF1ZW\nVhg+fDjOnTunlj5u3ryJpUuXok+fPrC2toaenh4MDQ1hY2MDLy8vnD9/vsTjqSqioqIwb9489OjR\nA5988gl0dHRgbGyMpk2b4quvvirV90tMTAy8vb3Fa2dpaYnevXvj0KFDxbZ99OgR9u/fjxkzZsDF\nxQVGRkbi++jgwYNlHl9+fj4cHBzEvuzt7cvcFxFRsQQiIiL6V/v7778FAO/1Onv2bGUPo8SsrKyK\nHY+JiYlw4MABlf3k5+cLo0aNUtqHtra2sHHjxveK9cGDB0KLFi1KdA9GjBgh1z46Olosj46Ofq9Y\nqHi7du1SeG9MTU0rO7RKZ2dnp/S9u2rVqhL1kZCQILRs2VJpPxKJRJgxY0aF9uHv71+iz+OoUaOE\n3NzcUl2jwvr37y8AEPr371/mPsqLl5dXsePV0NAQZs+eXWxfGzZsELS1tZX24+3tLUilUqXtTU1N\nlbYNDQ0t8xiXLVtWpC87O7sy90VEVBzOiCMiIvqXs7a2Rnp6usLXsWPHxHobNmxQWq9Tp06VOILS\nSUtLg6amJvr06YNt27bh9u3bSE5OxoMHD7By5UqYmJggLS0Nw4cPx19//aW0n4CAAAQHBwMAhgwZ\ngqtXr+LFixc4deoU7O3tkZubiwkTJuD06dNlijMzMxM9e/ZEbGwsNDU18cUXX+DUqVN4+PAhkpOT\ncffuXezZswfe3t6ccfWBWLhwIQDgs88+w+XLl/Hq1Sukp6fj8ePHlRzZh8PY2BhdunTBl19+Wap2\nWVlZ6NOnD27cuAENDQ3MnDkTt27dQnJyMi5evAhPT08IgoDly5dj1apVFdZHWloaAKBx48ZYuHAh\nIiMj8fTpUzx//hz//e9/0aZNGwBAcHAwvv3221KN8UMlG7ODgwNWrFiBK1eu4MWLF3j8+DH27NmD\nxo0bQyqVYvHixViyZInSfk6dOoWvv/4aubm5sLe3x6lTp/DixQtER0dj6NChAICgoCDMnTu32Jiq\nV6+OXr16wdPT873HFxcXh4CAABgYGMDS0vK9+yMiKlZlZwKJiIjow3X27FlxhkBgYGBlh1MuJk6c\nKMTFxSkt/9///ifo6OgIAARnZ2eFdRISEgRdXV0BgODp6SlX/vr1a6FevXoCAKFFixZCfn5+qeNc\ntWqVeO23bdumsu6bN2+ES5culfocVH5ycnI+us9KeTp27Jhw8+ZN8bNQeLZmSWbErVy5Uqy/Zs0a\nuXKpVCoMGTJEACAYGRkJz58/r5A+Nm/eLBw+fFhpnNnZ2UKHDh3E2XV3794tdmyKfEgz4pYtWyaE\nh4crLU9JSRFsbGwEAIKBgYHw+vVruTr5+flC8+bNBQBCvXr1hNTUVLk6np6eAgBBV1dXePTokcJz\n/f7778KDBw/Ef4eGhr73jLgePXoIAIQlS5aIMzc5I46IKhJnxBEREdG/ypo1a/Dpp58qLXdwcBBn\nZ0RGRiI1NVWuzpYtW5CdnQ0AWLp0qVy5iYkJ/Pz8AACxsbFlWjPq1KlTAAALCwt4e3urrGtoaIi2\nbduW+hxUfjIzM8W/OUNRnru7O5o1awYNjbL9/Ni9ezcAoG7dugpnmkkkEnE21ps3b7B169YK6cPX\n1xf9+vVTGqeOjg7mz58PABAEAX/88UdxQ/vgzZgxAx07dlRaXq1aNcyaNQtAwedA0ZqhYWFhuHnz\nJgDAz88PpqamcnWWLVsGoGANP0XXHgAGDBiAhg0blnYISgUHB+P06dNo0aIFpk6dWm79EhGpwkQc\nERERlau3b99izZo16NSpk7gQep06deDp6alyMe7U1NQii27n5OTg559/hoODA0xMTGBiYoL27dtj\n69atEAShQsfQokULAAU/pJ8+fSpXfvjwYQBA69at0bhxY4V9DBkyBBKJBABKtAj5u16+fAkA4mLk\nZVHcZg3VqlUrslj+vn370LVrV1SvXh36+vpo3rw55s+fXyTJpEhOTg6WL18Oe3t7GBoawtzcHM7O\nzggMDIQgCFi9enWJNi24dOkSRo8eDRsbGxgaGsLY2BgtW7bErFmz8OLFC6XtCo9DEAQEBQWha9eu\nsLCwgIaGBiZPnlyk/u+//w4PDw9x0XkTExM0bNgQ3bp1w08//YQHDx6ojLOwgwcPyo1twIABRTYz\nkS0i/+79ePPmDRYsWIDWrVuLY1C04HxoaCj69++P2rVrQ1dXFzVq1EDnzp2xbt06MSGsiL29PSQS\niTj+Y8eOwd3dHRYWFjA0NESrVq2wdu1a5OXliW2Sk5Px448/olmzZjA0NET16tXh6emJa9eulfia\nVATZ+Tt37qw0mdegQQNYWVkBKLhmFdFHSci+PwCU+rFk2WdF9p1x6NAhuc1xFD2OmZ+fj8DAQLi6\nusLCwgI6OjqwsLBAr169EBwcDKlUWqaxlFRxY5Z9Z2poaGDIkCEK+2jUqJG4SUJZvjNL6+XLl5g2\nbRokEgk2bNgAbW3tCj8nEREAaFV2AERERPTxiIuLg7u7O+7du1fk+NOnT3Ho0CEcOnQIAwYMwK5d\nu6Cvr6+0n8zMTLi4uODixYtFjl+8eBEXL15EaGgoQkJCoKurWyHjKJz0MTExKVKWk5OD2NhYAED7\n9u2V9lGtWjU0bdoUt27dwtWrV0sdg5mZGYCCXW0fPHgAGxubUvdRUoIgYPTo0QgMDCxy/NatW5g7\ndy5OnDiBs2fPQkdHR65tSkoKevbsif/973/isczMTERGRiIyMhJHjx5Fhw4dVJ4/Ly8PEydOxH/+\n8x+5stjYWMTGxmLTpk04ePAgOnfurLSf/Px8DBgwQOWPeC8vL+zcubPIsdzcXKSnpyMuLg5nz55F\nVlaWuN5bRXn69CmGDh2K+/fvK62TmZmJ4cOH48iRI0WOJycnIzw8HOHh4Vi/fj2OHz+O+vXrqzzf\nnDlzsHjx4iLHbty4gUmTJiEyMhK//fYb7t27B3d3d/z9999FYjh06BBOnTqFP//8E+3atSv9YN9T\nRkYGcnNzAfzf50IZc3NzJCYmIiYmBnl5edDS0iq3PkpK1fdHRUhKSkK/fv3kvi9fvnyJkydP4uTJ\nk9i8eTMOHz4Mc3PzComhuDHLvh9sbW1VJuQ7dOiAmJgYxMbGIjc3t0KTY5MnT0ZycjLGjh0LZ2fn\nCjsPEdG7OCOOiIiIykVGRgbc3Nxw7949aGlpYfbs2bh16xaSkpIQGRmJAQMGACiYZTJu3DiVffn5\n+SEqKgrTpk3DzZs3kZSUhIiICPTp0wcAcPToUUybNq1CxpGfny/OSqpXrx4++eSTIuX3799Hfn4+\ngILZM6rIHoG9c+dOqePo3r07AEAqlaJPnz44ePCgytlP7+OXX35BUFAQJk6ciOjoaLx69QqxsbHi\ngvqRkZHirLl3eXl5iT+yfX19ER0djeTkZMTExGD8+PEICQnB+vXrVZ7/22+/xX/+8x9oaGhg/Pjx\niIiIwMuXL/Hs2TMcPHgQdnZ2SElJgYeHR5Ek0btWr16NQ4cO4auvvsKVK1eQnJyMmzdvio8ah4SE\niEk4Dw8P/Pnnn0hMTMSrV69w//59HDhwAKNGjVKZJH5Xv379kJ6ejn/++Uc89ttvvxXZzETRo4zj\nxo3D06dPsXTpUty7d098jxeeWeTr6ysm4QYNGoQLFy4gKSkJt27dwsyZM6GlpYU7d+7Azc1N5azF\nI0eOYPHixRg5ciQuX76M5ORk3LhxQ7wue/fuxe7duzFgwADk5eUhKCgIiYmJePHiBXbv3g0zMzNk\nZmbC19e3xNelPBkYGEBTUxNAQeJXlVevXgEoSK4WntlYHn2U1IEDB8S/VSXrFfnmm2+Qnp6Ovn37\nAgD69u0rtznOnj17xPqy5LMsCTd+/HhER0cjKSkJ0dHRGDt2LAAgIiICAwcOrLCZccWNWfYdWNLv\nzLy8vDJd+5L6448/sHv3blhYWChcXoCIqEJV5gJ1RERE9GErzWYNAQEBYt3g4GCFdUaOHCnWeXfx\n75SUFLEMgLB69Wq59vn5+YKHh4e4EPqdO3fKPDZlCi/ovnjxYrnysLAwsXzHjh0q+/Lx8REACJqa\nmqWO4/Xr10KjRo2KXBN9fX2hQ4cOwsSJE4Vdu3YJT548UdlH4QXxo6Oj5cpNTU3F8l9++UVhH507\ndxYACE2aNJErO3XqlNh++vTpCtvPmjVLrGNqaipXXvg9tnfvXoV9ZGRkCPb29gIA4csvv1Q5jkWL\nFinsQxAEYfTo0QIAwcbGpkwbaKhS+P2rbNH4wvdDU1NT5QL4hd9nPj4+Cuts3bpVrLNgwQK5ctnC\n8wCEGTNmyJXn5+cLLVu2FAAIWlpaQo0aNYTExES5env37hX7Ka9NQUq7WUOLFi0EAIKVlZXSexcX\nF1fk8/Lu9S2PPorz6NEjwcjISAAgNGvWrMzvs5Ju1hAUFCTGOm/ePIV1/P39S/ydVRZXrlwRNDQ0\nBABCr1695MqlUqlYPmbMGJV9BQcHi7GeP3++2HOXZbOGN2/eCNbW1gIAYefOnUXKuFkDEakDZ8QR\nERFRudiyZQsAwNnZGSNHjlRYZ/Xq1eJso82bNyvtq0mTJpg4caLccQ0NDaxduxYaGhriWmDlKSoq\nCrNnzwZQ8AjVpEmT5OpkZGSIf+vp6ansTzbW/Px8ZGVllSoWExMTnD9/Hv379xePZWVlITIyEmvX\nrsWIESNQt25duLm54cqVK6Xq+13NmjXDN998o7BMtlHE3bt3kZaWVqRM9iirqampuED9u+bOnavy\nUUDZTLs+ffqIM7TeZWBggICAAAAFM29ycnIU1qtbty6+//57peeSrYVWq1atMm8aUF6GDBmicgF8\n2efJ0NAQq1atUlhn9OjRcHJyAqD682Rubq7w/mhoaIjXPC8vDzNnzkTdunXl6g0YMEB8r1+6dEnp\neSrSwIEDAQCJiYkKH2EGCh6/LSw9Pb3c+1AlJycHQ4cOxZs3b6ChoYF169ZV+PtM9j6xtraWi13G\n399fXPdO1fukLFJSUjBs2DBIpVLo6+tj5cqVcnWysrLEmXgl/c4ECjbMqAh+fn5ISEhA9+7dMWLE\niAo5BxGRKkzEERER0XuLj48XH81TlkwBCtZmcnV1BQCEh4crrefp6al0gwJra2t89tlnAAoetyov\niYmJGDhwILKzs2FgYIC9e/cW+4hicZsolHWTBRlLS0scPHgQN2/exNy5c+Hi4gJDQ0OxXCqV4sSJ\nE2jfvj22b99e5vO4ubkpLWvSpIn49/Pnz4uUya6/q6ur0mulp6eHXr16KSzLz8/H2bNnAQA9evTA\nmzdvlL6aNWsGoGAzkBs3bijsr1evXuLjh4rIFoKPiIjAokWL5BKL6iR7zFoZ2efD1dVV4Q6TMsOG\nDQMAPHr0CI8ePVJYp0uXLkoTIIV3oFR2n7S1tVGvXj0AULh5iTpMnDgRderUEf+eM2cO7t69i5SU\nFERFRWHQoEHYs2dPkffhu5+/8uhDlbFjx4qPiM6ZMwfdunUr83hLIicnB1FRUQAKkozK1rLT1tYW\nk5CXLl1Smsguy/mHDBmChw8fAgDWrl0rfk6VqejvzOJcvnwZa9euha6urtJkLBFRRWMijoiIiN5b\nQkKC+HdxP8SaN28OoCBxICjZ/bRp06Yq+5CdIz4+vhRRKpeUlARXV1c8fvwY2traCAkJQatWrRTW\nLZwIK26Wm2zdLk1NzVKtO/auZs2aISAgAGFhYUhLS0NsbCxWrFghbuCQl5eHsWPHqlz4XxVZckIR\nAwMD8e/C65BJpVIx8VM4WaeIra2twuNPnz4Vk2FTpkyBsbGx0lfh3WllO8q+q7j1p8aPHy/288MP\nP6BmzZro3LkzfvjhB5w6darcEhQloSpWQRCQmJgIoOSfJ0D550HV/S38vixJvdLO7Cwv1atXx5Ej\nR1C7dm1IpVIsXrwYtra2MDc3R7t27fD777+jTZs2RWbSvjsTszz6UGb69OliMnzkyJFKZ4iWp6dP\nn4rv2ZK+T7Kzs/Hs2bP3PrdUKoWXlxfOnDkDoGDWnbI1BPX19cWZgSX9zgQKdowuT3l5efD19YVU\nKsWcOXPQqFGjcu2fiKikmIgjIiKi91b48S1jY2OVdWXl+fn5SheYL+4HmKy8NI+NKfP69Wv06tUL\nd+7cgaamJn777TeVM8Rq1Kgh/l14p0BFZOXluVOhhoYGmjdvjqlTpyI2NlaMNScnBxs3bixTn6pm\nkRVWOHGamZkp/ruk9+tdr1+/LmGERb19+1bh8cJJQ2XlFy5cwNSpU1GjRg3k5OQgPDwcixYtgqur\nKywtLbFw4ULxEdaKpCrWjIwM8VG+kn6eAOWfh5Le35LUU5Y8VwcHBwfExsbixx9/hL29PYyMjGBg\nYAA7Ozv8/PPPiIiIKHLvZI9jlncf71qwYAFWrFgBoGBTjW3btlX4zC6gbN+777YrC0EQMG7cOOzb\ntw8AMGnSJJWJR4lEIn4HlvQ7EyhInJan9evX4/r162jSpAlmzZpVrn0TEZUGE3FERET03gr/yCtu\nXR9ZuaamptJkREn7KO7HZ3EyMjLg7u6Oq1evQiKRYNu2bRg0aJDKNjY2NmLCQvZIljKyHT6VzQh7\nX7q6uli3bp34b9nupepgYGAgJhsKr5uniLL7WThBt337dgiCUKKXp6dnmeM2NzfHihUr8Pz5c0RH\nR2P9+vUYOnQojIyMkJKSAn9/f4wePbrM/ZcHQ0NDcQZRST8LwPt/HqoCc3NzzJs3D9HR0UhPT0dG\nRgZiYmIwbdo0aGtr4+bNmwAKZvcpm+FXHn3IrFy5Ej/++CMAwN3dHbt37y5x4vN9leV79912ZTF5\n8mRs3boVQMHOvsrWMCxMNmu2pN+Zmpqa4ozf8hIXFwegYL1LXV1dSCQSude1a9cAANeuXROPTZ48\nuVzjICJiIo6IiIjeW/369cW/ZT9ilYmNjQUA1KtXT+mskdu3b6vs49atW3LnLa2srCz069cPFy5c\nAAD8+uuvSjeZKExXVxctWrQAAHE9KEVSU1PFccjWtKsINjY20NXVBQClMwwrgoaGhjhb6O7duyrr\nKiuvXbu2+MhjcT/Qy5uGhgbs7e0xYcIE7N27F//88w969uwJANixY4f4o70ySCQScU22kn6egPf7\nPHwMMjMz8ddffwEoSIpVdB8bNmzAtGnTABSswxcSEgIdHZ0ynbcsateuLZ6vpO8TXV1dWFpalvmc\ns2bNwtq1awEAn3/+OTZu3Fii2X+Ojo4AgDt37qicCRsZGQkAaNmypVqvJRGROjERR0RERO/N2tpa\nTMocOHBAab3U1FScOnUKANCpUyel9Q4ePKj0EbiEhARx5pezs3OZ4s3JycHAgQPFjQKWL1+OCRMm\nlLh9v379AADR0dF48OCBwjr79+8Xx+Dh4VGmOEvixYsXyM7OBqB6ja+KILv+J0+eVLr2U3Z2Nk6c\nOKGwTEdHB126dAEA7Nu3T3wcszKYmppixowZ4r+LSy5WNNnn4+TJkyo3ldi/fz+AgsS2LHn3b7V1\n61Zx5tf48eMrtI/g4GB8/fXXAAAnJyccOXLkvdaBfJe2tjaAgkf4ldHR0UG7du0AAKGhoUrr5uXl\nITQ0FADQrl27Mie45s+fj6VLlwIo2FBn+/btJd4VVvadKZVKlf4fcf/+fcTExAComO/MGTNmIDo6\nWuVLtoZk48aNxWOFvxeIiMoDE3FERERULmQLdYeHh2PXrl0K60ydOlWctTVu3Dilfd29e7fII5cy\ngiBg0qRJkEqlkEgk8Pb2LnWc+fn5+Pzzz/HHH38AAAICAjB9+vRS9TF27Fjo6upCEATMnDlTrjwt\nLQ0//fQTgIJF0l1cXEod57x583D+/Pli6/n7+4t/y3akVRfZ9U9NTcW8efMU1pk/fz5evXqltA/Z\njKLbt29j9uzZxZ7zfRJkxbUtPCuvvNenKi3Z5ykjI0Pp+zM4OFicQaTq8/RvcOXKFfzwww8AgBEj\nRqBNmzYV1seBAwcwZswYCIKA1q1b4/jx4+W+sYBsLconT56orCd7n8THx2PJkiUK6/z000/ixipl\nfZ+sXLkSc+fOBVCwu+7evXuV7tKqSNeuXcUNIxYsWKAwuSz7LtXV1cWYMWPKFKcqn3zyCezt7VW+\nZMlUfX198dgnn3xS7rEQ0b+cQERERKTE2bNnBQACACEwMFBl3Tdv3gg2NjYCAEFbW1v44YcfhNu3\nbwvJycnCxYsXhUGDBol9eXl5ybVPSUkRyz/99FNBQ0NDmD59unDr1i0hOTlZiIyMFPr27SvW+eab\nb0o9HqlUKowcOVLsY8KECUJ6errKV15ensK+/P39xX6GDh0qxMTECC9fvhROnz4ttG7dWgAgaGho\nCCdPnix1nIIgCN27dxcACC1atBAWLlwohIWFCYmJiUJqaqoQHx8vhISECD169BBjaNy4sZCVlVWk\nj+joaLE8Ojpa7hympqYCAGHVqlVK4yiuD3d3d7F83LhxQkxMjJCcnCxcu3ZNmDBhggBAaNiwoQBA\nMDU1VXiOr7/+Wuyja9euQkhIiJCQkCCkpqYKiYmJwtmzZ4UFCxYILVu2FJydncs0DkEQBDs7O8HB\nwUFYsmSJEB4eLjx58kRITk4Wbt68KSxdulQwMDAQAAg2NjZCfn6+yr7eVfj9GxoaqrBOcdfyXcOH\nDxfrDxkyRLh48aKQnJws3L59W5g9e7agpaUlABCaNGkiZGRkKBwvAGHSpElKzxEaGiqeIyUlRWm9\nkvSlytOnT4ULFy6Ir+3bt4vnnTx5cpGyu3fvKuzD1dVVmDJlinD+/Hnh2bNnQlJSknDlyhVh5syZ\ngp6engBAaNasmZCUlKQ0jvft4/jx44K2trb4vv77779Vfn+8+5ksqS1btojfIbt27RJSU1OF3Nxc\nITc3t8h7My8vT+jYsWOR77Rr164JycnJQkxMjDB+/HixzMXFpdTv68KxABDatm0rvHjxQuWYs7Oz\nFfZz8uRJQUNDQwAgtG7dWjh9+rTw8uVLISYmRhg6dKh4Dn9/f6WxxMfHF3mvLF26VGy3dOnSImXx\n8fGlHqvsfW5nZ1fqtkREJcVEHBERESlVmkScIAjCw4cPhcaNG4ttFL0GDBggZGZmyrUtnMjYtWuX\n0K5dO6V99OnTR3j79m2px1P4HCV9KUuq5OfnC6NGjVLaTltbW9i4cWOpY5QZOHBgiWN0cHAQEhIS\n5PpQRyIuOTlZTDwqeg0cOFD4+eefBQBC9erVFZ4jLy9PmDVrlvgjXdWra9euZRqHIPzfj2xVr9q1\nawsxMTEq+1GkIhJxGRkZQr9+/VTGa2trK/z9998qx/shJOJWrVpV4vdz//79Vcag7OXi4iI8e/ZM\nZRzv20f//v1L9f2hbCzFSUtLE6ysrErU58uXL1V+XwIQnJ2dVSYoVSnJ56bwS9V7ZMOGDWIiU9HL\n29tbkEqlSttPmjSpXOIobqxMxBFRReKjqURERFRuGjRogGvXrmHVqlXo2LEjzM3Noa2tDUtLS3h4\neCA0NBS///57sWspGRgY4Ny5c1i8eDHs7OxgZGQEIyMjODk5YfPmzThy5Ii4QUFl0dDQQFBQEEJD\nQ+Hu7g4LCwvo6OigXr16GDlyJKKiot7rccGQkBBERUXhp59+Qt++fWFjYwNDQ0NoamrCxMQETZs2\nxRdffIGQkBBcvny50tYHMzc3x4ULF7B06VK0atUK+vr6MDU1hZOTEzZt2oQDBw6IjyObmJgo7ENT\nUxOLFy/GzZs3MXnyZNjZ2cHU1BSampowNTVFq1atMHr0aOzbtw/Hjh0rc6whISFYv349Bg8ejObN\nm8Pc3BxaWlowNzeHs7MzFi9ejNu3b8POzq7M5yhPBgYGOHz4MEJCQuDh4QFLS0toa2vD3NwcnTp1\nwpo1axATE/Ov2aQhICAAo0aNgq2tLapVqwYdHR1YWVlh4MCBOHDgAMLCwlCrVq0K70MdjI2NERER\ngfHjx8PGxgZ6enpK69aoUQMRERHYtm0bevTogZo1a0JLSws1a9ZEz549ERQUhPPnz1f649ZAwbp7\nUVFRGDlyJOrVqwcdHR1YWFjA3d0doaGhCAwMLNHmD0REVZlEEJSshExERESkRqmpqTAzMwNQsPC4\np6dnJUdE5WXUqFHYvn07OnXqVKJ174iIiIg+VpwRR0REREQVJicnR9wY47PPPqvkaIiIiIgqFxNx\nRERERFRmaWlpyMvLU1ru5+eHFy9eAACGDRumrrCIiIiIPkhMxBERERFRmUVFRaFp06ZYvnw5oqOj\nkZycjOfPn+PPP//E4MGDsXz5cgBA37594eTkVMnREhEREVUurcoOgIiIiIiqtgcPHuD7779XWu7k\n5ISgoCD1BURERET0gWIijoiIiIjKzNHREevWrcOJEydw69YtJCUlISsrC+bm5mjdujWGDRsGLy8v\naGpqVnYZWfZzAAAgAElEQVSoRERERJWOu6YSERERERERERGpAdeIIyIiIiIiIiIiUgMm4oiIiIiI\niIiIiNSAiTgiIiIiIiIiIiI1YCKOiIiIiIiIiIhIDZiIIyIiIiIiIiIiUgMm4oiIiIiIiIiIiNSA\niTgiIiIiIiIiIiI1YCKOiIiIiIiIiIhIDZiIIyIiIiIiIiIiUgMm4oiIiIiIiIiIiNRAq7IDoNKp\nX78+EhIS5I4bGhqiYcOG6N27N6ZPn47q1atXQnQfhqCgIPj4+AAAtLW18c8//8DCwkJh3ezsbNSp\nUwevXr0CACxYsAB+fn5qi1VdnBadwbO0t5UdBpWCpYkeLs7pDoD3ryri/av6eA8/PPFL+lR2CERE\nRETvjYm4KsrZ2Rk2NjYAAKlUiidPniAyMhJLlizB9u3bER4ejgYNGlRylJUvNzcXO3bswLRp0xSW\nh4aGikk4IiIiIiIiIqKKxEdTqyhfX18EBQUhKCgI27dvx+nTpxEXF4fGjRvjyZMn+P777ys7xErX\nqlUraGtrIzAwUGmdbdu2AQDatGmjrrCIiIiIiIiI6F+KibiPiKWlJWbMmAEAOHPmTCVHU/lq1qyJ\nfv364ebNm7h06ZJc+aNHj3DmzBm0a9cOzZo1q4QIiYiIiIiIiOjfhIm4j4ylpSUAIC8vT66sS5cu\nkEgkCAsLQ3h4OPr164eaNWtCQ0MDQUFBAABvb29IJBLx3+8KCgqCRCKBt7e30uMZGRmYPXs2bGxs\noKurC0tLS4waNQqPHz9WGndUVBSGDh2KOnXqQEdHBxYWFujXrx9OnTpVpusgM3r0aAD/N/OtsMDA\nQEilUrGOIrm5udi5cydGjBgBW1tbmJiYQF9fH02aNMHEiRPx5MkThe1Kcq2lUik2bdoEZ2dnVKtW\nDdra2rCwsICdnR2+++47xMfHv9fYiYiIiIiIiOjDwkTcRyYqKgoA0Lx5c6V19u/fjy5duiAuLg49\nevRAz549oaurWy7nf/36NTp06IANGzagWbNmcHd3hyAI2L59O5ydnfH69Wu5Nps3b0b79u2xf/9+\nWFpaYvDgwWjUqBH++9//wtXVFfPmzStzPG5ubqhTpw727NmDrKws8bggCAgMDISBgQGGDx+utP3z\n58/h5eWFo0ePwszMDG5ubujWrRvevHmDdevWwd7eHg8ePFDaXtW19vX1xfjx43H16lW0adMGQ4YM\ngYODA7KysvDLL78gJiamzOMmIiIiIiIiog8PN2v4CEilUjx9+hShoaFYtmwZNDU1Ve78uX79evz6\n66/4+uuvyz2WgwcPolevXggPD4eJiQkAICUlBd26dUNMTAzWr1+P2bNni/Vv3LiBr7/+WkzWeXl5\niWXHjx+Hp6cnAgIC0KFDB/Ts2bPU8WhqamLUqFFYvHgxDhw4IPZ/5swZJCQkYOTIkWKcipiamuLQ\noUNwc3ODjo6OeDw3Nxdz587F4sWLMWnSJBw9elRhe2XX+tGjRwgMDETdunVx+fJlcSajzO3bt2Fo\naFjq8RIRERERERHRh4sz4qooHx8fSCQSSCQSaGpqom7duvjuu+/QqlUrnDt3Dn379lXatlu3bhWS\nhAMAQ0NDBAYGFklumZmZYdasWQCA06dPF6m/Zs0a5OXlYcCAAUWScADg7u6OcePGAQCWL19e5ph8\nfHwAFH08devWrQCg8rFUADA2NoaHh0eRJBwAaGtrY9GiRahTpw7++OMPpKenK2yv7Fo/f/4cAODg\n4CCXhAOApk2bol69eipjIyIiIiIiIqKqhTPiqihnZ2fY2NiI/05KSsL169dx+fJlTJkyBbt27UKj\nRo0Uth08eHCFxeXo6IjatWvLHW/atCkAyK0TFxYWBgBya87JjBkzBr/88gvCw8ORn58PTU3NUsfU\nqFEjdOrUCefOnUNcXBzMzMxw8OBBNGzYEJ07dy5RH9euXcOZM2fw999/IyMjA1KpFEDBWnxSqRQP\nHjxA69at5dopu9a2trYwNjbGsWPH8NNPP+GLL77Ap59+WuqxEREREREREVHVwURcFeXr6yuXvMrL\ny8OPP/6IxYsXw8XFBXfv3oWxsbFc2/r161dYXMpmcclmyL19+7bIcVliTlkSqmHDhmK75ORkWFhY\nlCmu0aNHIzw8HIGBgbC0tMTbt2/FWYWqZGRkwMvLC6GhoSrrpaWlKTyu7FobGxsjMDAQPj4+8PPz\ng5+fH2rXrg0nJye4ubnhiy++gJGRUYnGRkRERERERERVAx9N/YhoaWlh4cKFqFGjBp4+fYrt27cr\nrKevr1/mc8hmgimjofFhvqWGDBkCY2NjBAcHY8uWLdDQ0MCoUaOKbTd79myEhobC1tYWBw8exOPH\nj5GdnQ1BECAIAtq3bw+gYPMHRVRd60GDBiExMRHbt2/H2LFjYWZmhtDQUIwfPx42Nja4ceNG2QZL\nRERERERERB+kDzNrQmWmoaEhzsK6fft2qdvL1kJTtuZZQkJCmWNT5JNPPgEAxMXFKSyXHdfT04O5\nuXmZz2NoaIihQ4ciMTERMTExcHV1Rd26dYttt2/fPgDA3r170b9/f9SpU6fIenH3798vc0xAwWYQ\nXl5e2LRpE27evIlHjx6hf//+eP78Ob799tv36puIiIiIiIiIPixMxH1kpFIp4uPjAaBMjzbKEmOK\nkniCIOD48ePvFd+7unTpAgAICgpSWC7bYKFTp07Q0nq/J6l9fX1RvXp1VK9eHWPHji1Rm1evXgEA\nrK2t5cpOnDiBpKSk94rpXVZWVpg3bx4AICYmplz7JiIiIiIiIqLKxUTcRyQvLw9+fn5icsjDw6PU\nffTo0QMAsGPHDty6dUs8npubi5kzZ+Ly5cvlE+z/N2nSJGhpaeHgwYPYuXNnkbKTJ09i48aNAIDp\n06e/97mcnJyQlJSEpKQkDBw4sERtZJtMrFu3rsjxu3fv4quvvipzLNHR0di7dy+ysrLkyo4cOQJA\ncfKPiIiIiIiIiKoubtZQRW3ZskXccRQAkpOTce3aNSQmJgIAfvjhB3To0KHU/To7O6N///44dOgQ\nHB0d0bFjR+jr6+Pq1atIS0vDpEmTsGbNmvIaBlq2bIlff/0VEyZMgJeXF1atWgVbW1skJCQgMjIS\ngiAgICAArq6u5XbO0pg7dy4GDx4Mf39/7Nu3D82bN8eLFy8QHh6OTp06oU6dOoiMjCx1vwkJCRg+\nfDj09fXh4OAAKysr5OXl4caNG7h79y50dHSwbNmyChgREREREREREVUWJuKqqIiICERERIj/1tHR\nQe3atTFs2DB89dVX4iOfZbF3714sXLgQu3fvRlhYGMzMzNC9e3csWLAA4eHh5RB9UePGjYOdnR1+\n/vln/PXXX7h+/TpMTU3Ru3dvTJo0CT179iz3c5bUwIEDce7cOcybNw/Xrl3Dw4cP0aBBAwQEBGD6\n9OllThA6OTlhyZIlOH/+PG7fvo3o6GhoaWmhbt26+Oabb/Ddd9+hSZMm5TwaIiIiIiIiIqpMEkHZ\ndo9E9NFwWnQGz9LeVnYYVAqWJnq4OKc7AN6/qoj3r+rjPfzwxC/pU9khEBEREb03JuKIiIiIiIiI\niIjUgJs1EBERERERERERqQETcURERERERERERGrARBwREREREREREZEaMBFHRERERERERESkBkzE\nERERERERERERqQETcURERERERERERGrARBwREREREREREZEaMBFHRERERERERESkBkzEERERERER\nERERqQETcURERERERERERGrARBwREREREREREZEaMBFHRERERERERESkBkzEERERERERERERqQET\ncURERERERERERGrARBwREREREREREZEaMBFHRERERERERESkBlqVHQB9XLy9vREcHKyyTlZWFvT0\n9BSWnT59GitXrkRUVBQyMjJgbW2NQYMGYfbs2TAyMipzXImJidi4cSNOnz6Nhw8fIjU1FYaGhmjQ\noAE6deqEL7/8Em3atClz/x86p0Vn8CztbWWHQaVgaaKHi3O6A+D9q4p4/6o+3sOqIX5Jn8oOgYiI\niKhUmIijCuHs7AwbGxuFZZqamgqPr1q1ClOnToVEIkGnTp1Qq1YthIeHY9GiRQgJCcFff/2FGjVq\nlDqWZcuWwd/fHzk5OTAyMkK7du1gYWGB9PR03LhxA2vXrsXatWsxY8YMLFu2rNT9l4ewsDB07doV\nLi4uCAsLq5QYiIiIiIiIiKhiMRFHFcLX1xfe3t4lrh8dHY1p06ZBU1MTR44cgbu7OwAgMzMTHh4e\nOHPmDL766iscOHCgVHHMmjULS5cuhba2Nn7++Wd8++230NXVLVLn0qVL8PPzw71790rVNxERERER\nERFRaTARRx+ExYsXQxAE+Pj4iEk4ADAwMMDWrVvRoEEDhISE4M6dO7C1tS1Rn2fOnMHSpUsBAHv3\n7sWAAQMU1mvXrh1OnjyJiIiI9x8IEREREREREZES3KyBKl1OTg6OHj0KAPjiiy/kyq2treHs7AwA\nCA0NLXG/CxcuBAB4eHgoTcLJSCQSdOzYUe54SkoK5s6dC3t7exgbG8PAwAAtW7bEwoULkZmZKVc/\nICAAEokEAQEBePnyJb755htYWVlBR0cHVlZW+O6775CamlqkTZcuXdC1a1cAwLlz5yCRSMRX/fr1\nSzxeIiIiIiIiIvqwcUYcVYizZ8/ixo0bSE9PR/Xq1dG2bVv07t1b7rFQALh3756Y1HJ0dFTYn6Oj\nI8LDwxEdHV2i86empuL8+fMAgFGjRpVpDLdu3YKbmxsSExNRu3ZtdOzYEdra2oiKioK/vz9CQkIQ\nFhYGU1NTubaJiYlwcHBAbm4unJ2d8fbtW0REROCXX37BpUuXEBERAW1tbQCAm5sb9PT0cOLECdSq\nVQtubm5iP2VZE4+IiIiIiIiIPkxMxFGF2L59u9yx2rVrY9u2bUUSTQDw999/AwCqVasGY2Njhf1Z\nWVkVqVucq1evQiqVAkCZdkPNysqCh4cHEhMT4efnB39/f+jo6AAoWLfO19cXv/32G6ZMmYJt27bJ\ntd+2bRu8vb2xYcMGMfmYmJiI9u3b4/Llyzhw4AA+//xzAAXr2Dk5OeHEiROwtbVFUFBQqeMlIiIi\nIiIiog8fH02lcmVnZ4c1a9YgNjYWaWlpeP78OU6ePIkOHTrg6dOn8PDwkNsVND09HQBgaGiotF8j\nIyMAQFpaWoniePnypfi3hYVFKUcBBAcH4+HDh+jbty8WLFggJuGAgnXrNm3aBAsLC+zYsQMpKSly\n7evWrYtff/21yAxA2aOpAHD69OlSx0REREREREREVRsTcVSupkyZgokTJ6J58+YwNjaGhYUFevbs\nib/++gv9+/dHbm4uJk+eXNlhFku2Zt2wYcMUlhsZGcHR0RF5eXm4fPmyXHn37t1hYGAgd7xp06YA\ngMePH5djtERERERERERUFTARR2ohkUgwb948AMC1a9eQmJgolskeR83IyFDa/s2bNwAAExOTEp2v\nZs2a4t8vXrwodbxxcXEAAC8vryKbJxR+HTt2DEDR2Xcy9erVU9ivLP63b9+WOiYiIiIiIiIiqtq4\nRhypjWw2GAD8888/4rpvsp1BU1NTkZ6ernCdOFnirqS7iLZu3RoaGhqQSqW4fPmyeK6Skq0v5+bm\nhlq1aqmsa21tLXdMQ4M5biIiIiIiIiIqiok4Upvk5GTx78LJtiZNmsDAwACZmZm4cuUKunbtKtf2\nypUrAAAHB4cSncvMzAydOnXCuXPnEBwcjIEDB5YqVisrK9y5cwdjxozB4MGDS9WWiIiIiIiIiEgR\nTtshtdmzZw+AgsczmzRpIh7X0dFBnz59AAC7d++Wa5eQkIDIyEgAwIABA0p8vh9++AEAcPjwYYSG\nhqqsKwgCwsPDxX+7u7sDAPbt21fi870P2WYQeXl5ajkfEREREREREakfE3FUbmJiYnD48GG5ZJJU\nKsXWrVsxZ84cAMDEiROhra1dpM6sWbMgkUgQGBiIP/74QzyemZmJMWPGID8/H4MGDYKtrW2J4+nZ\nsyemTZsGABg+fDhWrlyJ7OxsuXqXLl1Cz549sWLFCvHYuHHjYG1tjf3792PmzJnizq6FPXv2DJs3\nby5xPKrUrVsXAHD//n3k5uaWS59ERERERERE9GHho6lUbuLj4zFgwACYmZnBwcEBtWrVQmpqKmJj\nY/Ho0SMAwOeff465c+fKtXVwcMCKFSswdepU9O7dGy4uLrCwsEB4eDiePn2KJk2aYMOGDaWO6eef\nf4a5uTkCAgIwbdo0BAQEoF27drCwsEB6ejquX7+OhIQEAMDMmTPFdoaGhjh69Cj69u2LZcuWYdOm\nTWjVqhXq1q2LzMxM3Lt3D7dv34aFhQXGjh1bxiv2f+rVqwdHR0dcuXIFLVu2hKOjI/T09FCjRg0s\nWbLkvfsnIiIiIiIiosrHRByVGzs7O0yePBlXrlzBnTt3EBERAUEQUKtWLQwePBg+Pj7o3bu30vZT\npkxBy5YtsWLFCkRFRSEjIwP16tXD7NmzMXv2bIWbOJTEnDlzMGLECGzcuBGnT59GdHQ0Xr9+DUND\nQzRo0ACenp4YNWoUWrduXaRd8+bNcf36dWzYsAGhoaG4fv06Lly4gBo1aqBu3bqYPn16qR6VLU5I\nSAhmz56Ns2fPYu/evcjLy4O1tTUTcUREREREREQfCYkgCEJlB0FEFctp0Rk8S3tb2WFQKVia6OHi\nnO4AeP+qIt6/qo/3sGqIX9KnskMgIiIiKhUm4oiIiIiIiIiIiNSAmzUQERERERERERGpARNxRERE\nREREREREasBEHBERERERERERkRowEUdERERERERERKQGTMQRERERERERERGpARNxRERERERERERE\nasBEHBERERERERERkRowEUdERERERERERKQGTMQRERERERERERGpARNxREREREREREREasBEHBER\nERERERERkRowEUdERERERERERKQGTMQRERERERERERGpARNxREREREREREREasBEHBERERERERER\nkRowEUdERERERERERKQGWpUdAFVt9evXR0JCQrH1AgMD4e3tXWFxhIWFoWvXrnBxcUFYWFiFnaeq\nclp0Bs/S3lZ2GFQKliZ6uDinOwDev6qI96/q4z2smuKX9KnsEIiIiIhUYiKOyoWzszNsbGyUlqsq\nIyIiIiIiIiL6N2AijsqFr69vhc54K07btm1x+/ZtGBgYVFoMRERERERERESqMBFHHwUDAwPY2tpW\n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\nAAAAAAAg53Fraj4RGhqq5ORkNWjQQCaT6aGfMWPGSMr6Sxvatm0rSeaXF2RW6u2d7u7uGfYvXbo0\nS/P/1eDBg7VgwQJZWVlp0qRJGj9+fJp+W1tb+fj4SJJWrVr1xPNbWVlpxIgRMplMmjFjhhYsWCDD\nMNLdlvoo1apV0+jRoyXdf4MrAAAAAADIPwji8onU3WR+fn6PHJd6i+SGDRt06dKlTK/31ltvycnJ\nSevWrdP48ePTvLhAuv+8td27d//tPM8//7wkKTIyUr/88kuavvnz52vlypWZrjEjAwcO1MKFC2Vl\nZaUPP/xQ7777bpr+oKAg2dra6u2339bSpUvNt6v+1aFDh7R27doM5x80aJCcnJwUEhKiK1euqHXr\n1qpatWq6cREREdq8ebOSkpLStJtMJm3cuFGSVL58+cyeJgAAAAAAyIUI4vKB6Oho/fbbb7K3t1fv\n3r0fObZ69eqqU6eO7t27pyVLlmR6TXd3d4WHh8vJyUkffvihypUrp65du6pnz55q0KCBypYtq5CQ\nkL+d58UXX1Tnzp1148YNvfjii2rTpo369Omj559/XkOHDtW4ceMyXePD+Pn5afHixbK2ttaUKVPM\nuwQlqV69elqyZImSk5PVv39/eXh4qG3bturXr5/atWunsmXLqlatWgoPD89wbmdn5zRh6IgRIzIc\nd+DAAbVv317FihVTq1at1LdvX3Xr1k3ly5fXokWL5OLioqCgoGw9bwAAAAAAkLMI4vKB1NtMO3bs\nqCJFivzt+NRdcVm9PfXll1/Wzz//rJEjR8rFxUVbtmzR5s2blZCQoP79+2vo0KGPNU9YWJimT5+u\nqlWravfu3dq2bZvc3d21detWDR48OEs1Pky/fv305ZdfytraWtOnT9fbb79t7uvdu7f+97//6Z//\n/KecnZ21a9cuff311zpy5IiqVKmiqVOnatKkSQ+dO/WNtR4eHurQoUOGYzp37qwJEyaobt26On78\nuFavXq3o6GgVKVJE48aN088//6xatWpl70kDAAAAAIAcZZiy8jpKAOn07t1bK1eu1LRp08zPewMA\nAAAAACCIA7LRgQMH5OXlJUdHR8XHxz/xm1cBAAAAAED+ZZPTBQB5XUpKigICAvTnn39q8+bNSk5O\n1nvvvUcIBwAAAAAA0mBHHJBFSUlJsrW1lZWVlcqVK6fAwECNHTtWhmHkdGkAAAAAACAXIYgDAAAA\n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\nVqzQ1atX1bJlS1WrVs3cHhsbq7Zt2+rq1atyd3dXly5ddO3aNUVFRWnPnj1as2aN1q1bJzs7u3Rz\nXrt2TY0bN9bvv/+uZs2aqUaNGvruu++0ZMkSRUdH67///a8KFy6c5pjIyEh1795dCQkJKlGihHx8\nfGRnZ6e4uDjzv43GjRubx589e1Zt27bVoUOH5Orqqnr16snJyUn79+/X9OnTFRYWpqioKJUvXz6T\nVwEAAAAAAORGmd4Rt2XLFknSgAED0rRv3rxZ69evl8lkkq+vr3r06CErKyutXbtWYWFhWasWuVJK\nSorOnDmj2bNna9q0abK2ttb48ePTjJkwYYJWrVqlBg0a6PDhw4qJidGqVat04MABhYWF6e7du3r1\n1VeVkJBgPuaNN96QJM2ePTvDdefMmSNJGjFihLktMTFRPXr00NWrVzV06FD99ttv+uqrr7R582b9\n73//k4eHh7Zu3aqJEydmOOfatWtVqlQpxcfHa926dVq7dq2OHDmiF154QfHx8Zo7d26a8adOndIr\nr7yihIQEjR07VqdOndLatWu1atUq7d27V6dPn9bgwYPN400mk3r27KlDhw7pH//4h+Li4vTtt99q\n9erV+u233/T2228rLi5OAwcOfIIrAAAAAAAA8oJMB3GHDh2SJDVo0CBN+5dffinDMPT2229r3bp1\nWrlypWbNmiWTyaTFixdnrVrkGgMHDpRhGDIMQ9bW1ipbtqxef/111apVS9HR0erQoYN57NWrV/Xx\nxx/LwcFBX3/9tSpUqJBmru7duyswMFB//PGHli5dam7v27evihYtqg0bNig+Pj7NMd9//71+/PFH\nlStXTp07dza3h4WFKT4+XqVLl9Ynn3wiW1tbc1/FihU1Y8YMSdJnn32mO3fupDsvR0dHLVq0SM7O\nzua2IkWKaOzYsZKkiIiINONnzZqla9euqWPHjpo8eXK6XXYlSpRQ06ZNzd+3bt2qmJgYvfDCCwoO\nDpaTk5O5z8bGRtOmTVONGjW0Y8cO/fzzz+nqAwAAAAAAeVemg7hLly6pYMGCKlKkSJr21If0Dx06\n1NyWurtn//79mV0OuUyTJk3k5+dn/vj6+qpcuXKKjY3Vm2++qV9//dU8dseOHbp9+7aaNGmiMmXK\nZDift7e3JKV5nlqBAgUUEBCglJQUzZs3L8341N1wQ4cOlbW1tbk9KipKktS7d2/Z29unW6dbt24q\n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\nVY8DAAAAAAAAcq0sDeIeFh0drbCwMM2ePTs7HgcAAAAAAADkKtkWxAEAAAAAAAAvMoucLgAAAAAA\nAAB4ERDEAQAAAAAAANmAIA4AAAAAAADIBgRxAAAAAAAAQDYgiAMAAAAAAACyAUEcAAAAAAAAkA0I\n4gAAAAAAAIBsYJXTBQDIeo3GrNXF+Ds5XQYyoKRDfm37xFMS3y8v4vvlfXzDvI3vl7VOBb+Z0yUA\nAJBn5ZkZcU5OTjIYDAoNDc3pUsxKqe/UqVNZ9oxRo0bJYDBk+E90dLQkKTAwMFt/w+z4TTLK3d09\n1W/yrFJ+YwAAAAAAgMdhRtwTCAwMVFhYmGbPnq3AwMAcq6NOnToKCAhIcz0yMlKXLl1S7dq1VadO\nnTTtJUuWzI7yAAAAAAAA8AgEcZlk7dq1un//vsqUKZNlz2jXrp3atWuX5rq7u7suXbqkdu3aadSo\nUene//XXX2vYsGEqVapUltUIAAAAAAAA8wjiMkmlSpVyuoTHKlWqFCEcAAAAAABADskze8SZ87g9\nz0JDQ2UwGMwuJ120aJG8vLxUtGhRWVtbq2jRoqpRo4Z69uypvXv3SpJOnTolg8GgsLAwSVK3bt1S\n7b328Oyz9PZDe3hPst27d8vX11eOjo7Kly+fatSooW+++UZGozEzfo7HSu/3Stl7btSoUTp//rx6\n9Oih0qVLy9bWVq+88opmzpxp6nvo0CG99957KlmypPLnz6/atWvrp59+euyzw8PD5erqKgcHBxUo\nUEDu7u5asWLFI+9ZvHixWrVqpWLFisnGxkZlypRRly5ddODAgTR9U76Vk5OTHjx4oJCQENWtW1f2\n9vZPtIfb5cuXNXHiRLVu3VrOzs6ytbWVg4OD6tevr//85z+6cydjmzw/ePBAffv2lcFgUK1atXTm\nzJlU7devX1dQUJDq1KmjAgUKyM7OTrVq1dJXX32l27dvZ+hZAAAAAAAgb3ghZ8R98cUXCgoKkpWV\nlZo0aaIyZcror7/+UmxsrGbOnKmaNWvKxcVF9vb2CggI0ObNm3X8+HE1bdpUlStXNo1jbj+29ERF\nRSkkJESVKlWSt7e3Lly4oM2bN2vo0KE6c+aMvv3226x41QyJjY1VvXr1ZGNjIzc3N12+fFkbN25U\njx49dOPGDTVt2lSvv/66SpcuLQ8PD50+fVpbt27Vu+++K0nq2LGj2XEnTpyo8ePHq379+mrTpo2O\n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\n9xUUFKSvv/5agwcPVkREhNn7g4OD9d1336l3796ma+vWrZOXl5cmT56soUOHqmzZspKkt956SxUq\nVFBMTIx27dqlunXrphprxYoVOnXqlFxcXNSsWTPT9aioKA0ZMkRFixbVkiVLUrXt27dPrVu3VlBQ\nkJo3b67mzZs/0e/k4eGh2bNnpxvEpcyGa968uRYsWKDY2FiVL18+VZ+KFSuarqUYMWKElixZoiZN\nmmj+/PmqUKGCqe2nn37Se++9p06dOunEiRNycHCQJI0ePVqJiYlasGCBOnbsmGq8Gzdu6PDhw6b/\nDwkJ0YwZMxQTE6NmzZppxowZT/S+AAAAAAAgb2FGXB4QERGhxMREvf32248N4SSpQIEC8vHxSbNs\n1draWmPGjFHp0qUVGRmpmzdvmr3f19c3VQgnSS1atFDLli314MGDVEGXpaWl+vfvL0maMmVKmrFS\nZsql9EkRFBQko9Go7777LlUIJ0m1atVSSEiIJGnSpEmPfd8UKTPZDh8+rAsXLpiur1+/Xo6OjqpZ\ns6YkmYK9h98jvf3hrly5ogkTJsjOzk6LFy9OFcJJUseOHdWjRw9dvXpV8+fPN12/dOmSJKl169Zp\n6ixUqJAaNmz4xO8FAAAAAACeDwRxeUBKUBUeHq4xY8Y88X179uxRSEiIBg4cqO7duyswMFCBgYFK\nTExUUlJSustT27Zta/Z69erVJUnnzp1Ldb1Hjx6ys7PT/Pnzdf36ddP1Y8eOadWqVSpUqJC6dOli\nun7lyhX99ttvsrW1TfdZKbPXYmJinvh9y5Ytq8qVK0v6/xlusbGxOnnypJo1ayaDwSDp/4O4h/eJ\nS29/uLVr1+ru3btyc3NTqVKlnrjWBg0aSJI6deqkLVu2KDEx8YnfAwAAAAAAPJ9YmpoHdOvWTR07\ndtSAAQP06aef6sGDBxo5cmS6/W/duiV/f3+Fh4c/ctz4+Hiz1/+5NDNFyrLLO3fupLpeuHBh+fv7\n6/vvv9fMmTNNs/amTp0qo9Gobt26yc7OztT/5MmTMhqNSkhIUL58+R5Z4+XLlx/Z/k8eHh46duyY\n1q9fr06dOqVZliolB4rFixc3tV28eNG0VPSfQdyJEyckJS+lTQnynqTWsWPHat++fYqIiFBERIRs\nbW1Vr149ubu7q0uXLqpatWqG3gsAAAAAAOR9BHF5RL9+/WRpaam+ffvqs88+U1JSkoKCgsz2HT58\n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\nJH9/fxUsWFDVq1eXi4uLbt26pd27d2vSpElasGCBYmJiVLly5VT33b9/X++++66WLl0qCwsLNWjQ\nQC1atNCVK1d04MABDRs2TB07dkwTqh09elR169aVjY2NmjZtKqPRKEdHx0e+259//qmmTZsqPj5e\nVatWVZs2bWRpaamzZ89q48aNOnfunLp16/ZMvx8AAAAAAMhdCOKQa02bNk3Lli1TiRIltH79elWv\nXl1S8iy5QYMGaerUqWbvK1iwoH7++We1atVKNjY2puv3799XUFCQvv76aw0ePFgRERGp7hs2bJiW\nLl0qJycnLVu2TLVr1za1GY1GrVu3ToULF07zvPnz56tLly6aMWOG8uXL90TvFhISovj4eH311Vf6\n9NNPU7UlJCTo999/f6JxAAAAAABA3sHSVORa3377raTkJaApIZwkWVlZKSQkRCVLljR7X4ECBeTj\n45MqhJOS92sbM2aMSpcurcjISN28edPUFhcXp8mTJ0uSFi9enCqEkySDwSBPT08VLFgwzfOKFCmi\nyZMnP3EIJyXP2pOk1q1bp2mztbVVs2bNnngsAAAAAACQNzAjDrnSuXPndOzYMUlSly5d0rTnz59f\n77zzjiZOnJjuGHv27NHatWt18uRJ3bp1S0lJSZKSZ9QlJSXp2LFjqlu3riRp/fr1unfvnurVq6d6\n9eplqFYvLy+zAd2jNGjQQCtWrFDfvn31+eefq3nz5sqfP3+GxgAAAAAAAHkLQRxypbNnz0qSHB0d\nZW9vb7aPs7Oz2eu3bt2Sv7+/wsPDH/mM+Ph4099Pnz4tSU91wqm5gxge58MPP9TmzZu1Zs0atWrV\nStbW1qpdu7aaNWumd999V6+99lqGxwQAAAAAALkbS1OR41JmqmWW4cOHKzw8XNWqVdOyZct07tw5\n3b17V0ajUUajUY0bN5aUvO9bZrC1tc3wPXZ2dlq9erV+++03ffHFF/L09NSRI0cUEhKiBg0aqH//\n/plSGwAAAAAAyD2YEYcsl7JX28N7sj0sZTbaw8qUKSNJunLliv7++2+zs+JOnTpldryFCxdKkn76\n6Se5uLikaT969Giaa+XLl5ckHTp0yOyYWeW1114zzX5LTEzUsmXL1LVrV02dOlV+fn7y8PDI1noA\nAAAAAEDWYUYcslxKqHbw4ME0bbdv39b69evTXC9btqwqVqwoKflU0n+6e/euFi1aZPZ5165dkyRV\nqFAhTVtUVJSuXLmS5nqLFi1kY2OjHTt2aOfOnY94m6xjZWUlPz8/tWzZUpK0e/fuHKkDAAAAAABk\nDYI4ZDkvLy9J0pQpU3Tu3DnT9Vu3bqlXr146c+aM2fv+9a9/SUo+NfXhmWoPHjzQ0KFDdf78ebP3\npZywOmnSpFTXDx8+rD59+pi9p3jx4urbt68kqUOHDvrzzz9TtRuNRq1bt05//fVXuu+ZEVOnTtXh\nw4fTXL948aL++OMPSeaDRAAAAAAAkHexNBXP5Msvv9R3332XbvvUqVP1zjvv6Ntvv9Uff/yhmjVr\nytXVVUlJSfrjjz9kY2Oj7t27a9asWWnu7d+/v1avXq1ffvlFtWvXloeHhwoXLqzt27frwoUL6tu3\nr6ZNm5bmvqCgIPn5+WnkyJFauHChatasqbi4OG3atElubm4qXbq0YmJi0tw3duxYnTx5UsuXL1ft\n2rXVsGFDOTs768qVK9q/f7/OnTunkydPZviEVHOmT5+u/v37y9nZWa+88oocHBx0+fJlbdq0SQkJ\nCWrRooV8fHye+TkAAAAAACD3YEYcnsmJEye0ffv2dP/Ex8fL2tpaq1ev1oABA1SgQAGtWrVKe/fu\n1dtvv62dO3eqXLlyZse2sLDQ0qVL9c0336hy5cqKjo7W6tWr5eLiom3btqlBgwZm7/P19dWGDRvk\n6empCxcuaPny5YqLi9OoUaO0cuVKWVtbm73PxsZGy5Yt0/z58+Xl5aUjR45o0aJF2rt3rypWrKhx\n48apZMmSmfK7jR49Wn379lWhQoW0bds2LVq0SAcOHFDDhg0VFhamyMhIWVmRkwMAAAAA8DwxGDPr\n6EgAuVajMWt1Mf5OTpeBDCjpkF/bPvGUxPfLi/h+eR/fMG/j++VtfL/Mcyr4zZwuAQDwDwRxAAAA\nAAAAQDZgaSoAAAAAAACQDQjiAAAAAAAAgGxAEAcAAAAAAABkA4I4AAAAAAAAIBsQxAEAAAAAAADZ\ngCAOAAAAAAAAyAYEcQAAAAAAAPg/9u48vqZr///4+0gkIpFETBFkoMaagqiax6IlipqqCHVd1NBW\na2pLWpfbUb9qKFqkWmqsqdRYCVo1ayktkcRUUwSZCEn27w+/nCvNSSSRnEj6ej4eeTxkr7X2+uzz\nsc9xPvbeC1ZAIQ4AAAAAAACwAgpxAAAAAAAAgBVQiAMAAAAAAACsgEIcAAAAAAAAYAUU4gAAAAAA\nAAAroBAHAAAAAAAAWAGFOAAAAAAAAMAKKMQBAAAAAAAAVkAhDgAAAAAAALAC27wOAHnH29tbZ8+e\n1aJFixQQEPDQ/oGBgXr33Xc1efJkBQYGmrcHBwerVatWatGihYKDgx+6nzNnzuiJJ56QyWTSlStX\nVKpUqTR9vvnmG/Xr10+S9PXXX+ull15K0+fatWsqU6aMDMNQaGioKlWq9NC5/6kaTduhy9F38joM\nZIG7cxH9MrGNJPKXH5G//I8c5m/kL38jf/lbZvMX8f5z1gwLAB4bXBEHq6tUqZIqVKggwzAUEhJi\nsc/OnTvNf06vuBccHCzDMFShQgWKcAAAAAAA4LFHIQ6ZNmLECJ08eVIjRox45H21atVKUuqC24OC\ng4NVqlQplS9fPsNC3IP7AgAAAAAAeJxRiEOmlSxZUtWqVVPJkiUfeV8ZFeLOnz+vsLAwtWjRQi1a\ntNCZM2d0/vz5NP1SxlKIAwAAAAAA+QGFOGRaYGCgTCZTqufDZVdK8ezkyZO6cuVKqraUK91atmyp\nFi1apNqW4sqVKzp58mSqfaX45Zdf9Oabb8rPz09lypSRnZ2d3N3d5e/vrx9//DFNLG+99ZZMJpNe\neeWVdOP9+eefZTKZ5OnpqaSkJEnS9u3bZTKZ1LZtW927d0///e9/VaNGDTk4OKhEiRJ64YUX9Oef\nf6a7z6ioKE2aNEl16tRRsWLFVLRoUdWuXVvTpk1TfHx8uuMAAAAAAED+RCEOecLLy0s+Pj6S0hbZ\nUn5PuSJOSnvlXEofHx8feXl5pWobP368Pv30UyUkJMjPz0/PP/+8PDw8tGHDBrVt21azZ89O1X/4\n8OGytbXV119/rZiYGIvxpowZOnSobGxsUrXdvXtX7du319SpU+Xt7a3nnntORYsW1erVq9W4cWOd\nO3cuzf6OHz+u2rVra8qUKYqMjFSzZs3Upk0bXb16VW+99ZaaN2+u6OjodF49AAAAAACQH1GIQ55J\n7/bUlOfDPfnkk6pSpYrc3d3TLdZZui117NixunDhgn777Td9//33WrFihQ4fPqzdu3fL0dFRr7/+\nui5fvmzuX65cOXXv3l0xMTEKCgpKs7+rV69q1apVsre317/+9a807bt371Z0dLTOnDmjTZs2adWq\nVTp16pTatm2rqKgoffDBB6n6x8fHq3Pnzrp48aICAwMVERGhTZs2acOGDTpz5ox69uypQ4cO6Y03\n3sjMywgAAAAAAPIJCnHIM5YKcefOnVNYWJiaN28uk8kk6f6VceHh4Tp79qy5X0bPh3v22Wfl7u6e\nZnvTpk01bNgw3b17V+vXr0/VNnr0aEnSnDlz0oybP3++7t69q549e6pUqVJp2gsVKqSgoCCVKVPG\nvM3BwcF8C+/27dtT9V+4cKEiIiL0/PPPa/LkySpcuLC5zdHRUV9++aVKlCihr776iqviAAAAAAAo\nQCjEIc+kFNFOnTqlS5cuSUp9W2qKvz8n7vLly+Znr6W3UENkZKQWL16ssWPH6l//+pcCAgIUEBCg\nPXv2SFKaZ7c9/fTT8vPz0x9//JGqcJaUlKR58+ZJUrqrxfr4+KhmzZpptlevXl2SdPHixVTbN27c\nKEnq1auXxf0VK1ZM9evX1927d3Xw4EGLfQAAAAAAQP5jm9cB4J+rXLlyqly5sk6fPq2dO3fqxRdf\nTLVQQ4oHC3EDBgww96lcubLKlSuXZr9z587VmDFjMlzwwNKVZqNGjVK/fv00a9YstW3bVpK0bt06\nXbhwQX5+fmrYsKHFfXl6elrc7uzsLEm6c+dOqu1hYWGSpD59+qhPnz7pxihJ165dy7AdAAAAAADk\nHxTikKdatWqVphBXokSJVFeY1ahRQ6VKlTLfjprRban79u0zL77w0UcfqVOnTqpQoYKKFi0qk8mk\nOXPm6JVXXpFhGGnG9uzZU2+++aa+//57nTt3Tp6enuZFGtK7Gk66f2tqViQnJ0uSOnbsqNKlS2fY\nN70iHwAAAAAAyH8oxCFPtWrVSvPnz9fOnTt17tw5hYeHq2vXrubnw6Vo3ry5Vq9erYiIiAwXali5\ncqUMw9Crr75qcbGD06dPpxuLnZ2dhg4dqsDAQH3++efq37+/fvzxR5UqVSrd20izo0KFCgoNDdWQ\nIUP0/PPP59h+AQAAAADA441nxCFPpdyCeubMGX3zzTeptj0o5fbUJUuW6NSpU+n2i4qKkiR5eXml\nabt9+7a+++67DOMZOnSo7Ozs9OWXX+qTTz6RJA0ePFj29vaZOp7M6NixoyRpxYoVObZPAAAAAADw\n+KMQhzzl7u5uXtQgpfCVUSFu+vTpku4vhGBpZdSUfS1atEixsbHm7Xfu3NHQoUN17ty5DOMpU6aM\nevfurcjISC1YsEA2NjYaNmxY1g8sA0OHDlWFChX07bffauLEianiTHHp0iV9+eWXOTovAAAAAADI\nW9yaCk2ZMkVz585Nt33OnDmqV69ers3fqlUrnTx5UlFRUXJzc1OtWrXSkJ4GlwAAIABJREFU9KlV\nq5bc3NzMV7ylt1rqyy+/rJkzZ+rQoUPy8fFR06ZNVahQIe3evVsJCQkaNWqUPvvsswzjGTVqlBYv\nXixJ8vf3V4UKFR7xCFMrVqyYNm7cqM6dO+u///2v5s6dq1q1aql8+fKKi4vTqVOn9Mcff8jDw0OD\nBw/O0bkBAAAAAEDeoRAHhYWFmVfytMTSCqM5qVWrVpozZ46k+8+C+/vz4STJZDKpWbNmWrdunXmM\nJW5ubjp48KAmT56srVu36ocfflCJEiXUoUMHBQYG6scff3xoPPXq1VPJkiUVGRmZ4SINj6JWrVr6\n7bff9Pnnn2vt2rX67bfftHfvXpUqVUrlypXTm2++qa5du+bK3AAAAAAAIG9QiPsHi4iIyFL/wMBA\nBQYGptnesmVLi6uQZtYLL7yQqfFr167N1P5Kly6tzz//3GJbxYoVH3qV2ZYtWxQZGakaNWqodevW\n6fZr27ZthnHb2tpm2O7s7Kxx48Zp3LhxGcYDAAAAAAAKBpPxKBUUoIBJTExU06ZNtW/fPi1YsECD\nBg3K65AAAAAAAEABQSEOkLRgwQLt2bNHBw4c0O+//666devq4MGDsrGxyevQAAAAAABAAcGqqYCk\nnTt3KigoSH/99Ze6d++u9evXU4QDAAAAAAA5iiviAAAAAAAAACvgijgAAAAAAADACijEAQAAAAAA\nAFZAIQ4AAAAAAACwAgpxAAAAAAAAgBVQiAMAAAAAAACsgEIcAAAAAAAAYAUU4gAAAAAAAAAroBAH\nAAAAAAAAWAGFOAAAAAAAAMAKKMQBAAAAAAAAVkAhDgAAAAAAALACCnEAAAAAAACAFVCIAwAAAAAA\nAKzANq8DKMi8vb119uxZSdKoUaM0Y8aMdPt+9NFHGjt2rCTJxsZGiYmJVolR+l+c4eHh8vb2fqR9\nRUREyMfHR15eXoqIiMiR+P5u3759CgoK0q5du3Tx4kXFx8fL1dVV1atXV7t27dS/f395enrmytz5\nVaNpO3Q5+k5eh4EscHcuol8mtpFE/vIj8pf/kcP8jfzlb+QvfyN/+V9e5DDi/edyfQ7gccEVcVay\nZMkS3b17N932hQsXWjGa/Ck+Pl4vvviiGjVqpLlz5yoqKkpNmzZVjx495Ovrq99++03vvPOOKleu\nrLVr1+Z1uAAAAAAAAKlQiLOCBg0a6Pr161q3bp3F9p9//ll//PGH/Pz8rBzZfTt27NDJkydVrly5\nPJk/M+7du6f27dvr22+/VdmyZbVu3TpdunRJ33//vZYsWaItW7bo2rVrWrFiRa5ejQcAAAAAAJBd\nFOKsYNCgQZLSv+ptwYIFqfpZW6VKlVStWjUVLlw4T+bPjClTpmjPnj1ydXXVTz/9JH9//zR9bG1t\n1aNHDx0+fFgtWrTIgygBAAAAAADSRyHOCmrVqqUGDRpo69atunjxYqq22NhYrVixQuXLl9czzzyT\n7j5OnDihyZMnq0mTJipXrpzs7OxUokQJtW3bVitWrLA4Jjg4WCaTSS1btlR8fLwmTZqk6tWrq2jR\noqmeBeft7S2TyZTmKrKzZ8/qgw8+UOvWreXp6Sl7e3u5urqqadOmmjdvnpKTkzM8bsMwNH/+fNWv\nX1+Ojo5ycXHRM888o71792b8gv1NTEyM+fl6kyZNko+PT4b9nZyc5Ovra/793r17+uabb9S3b19V\nq1ZNzs7OcnBwUNWqVTVq1Cj99ddfFvfTsmVLmUwmBQcHa/fu3ercubNKlSqlQoUKKSgoKFXfQ4cO\nqW/fvubXyc3NTe3bt9emTZtS9YuOjpazs7NsbW11/vz5dI/h2Weflclk0pw5czI8VgAAAAAAkH9Q\niLOSQYMGKTk5OU0BZ8WKFYqNjdWAAQNUqFD66Zg+fbree+89RUVFqVatWurWrZuqVq2qnTt3qlev\nXnr99dfTHXvnzh21bNlS06dPl4+Pj/z9/VW5cuWHxvz1119r/PjxioiIUJUqVdStWzfVrVtXBw4c\n0NChQ9WjRw8ZhpHu+IEDB2rEiBFydXVVp06d5O7urm3btqlVq1bat2/fQ+dPsXPnTkVHR8tkMql/\n//6ZHpfiypUr6tevnzZu3KjixYurQ4cOat26tWJjYzVz5kzVrVtXoaGh6Y5fuXKlWrZsqbCwMLVt\n21bt2rWTvb29uX3GjBlq2LChli5dqhIlSsjf319PPvmkgoOD9dxzz+m9994z93V2dlZAQICSkpI0\nd+5ci/OdOXNGmzdvlrOzc7aOFwAAAAAAPJ4oxFnJiy++KAcHhzSFuIULF8pkMj30ttR+/frpzJkz\nOnnypDZv3qxly5bp559/1okTJ1S+fHl9+umn2r9/v8Wx+/btU0JCgkJDQ7Vp0yYtW7ZM27Zte2jM\n7du317FjxxQWFqbt27fr22+/VXBwsMLDw1WnTh199913WrVqlcWxZ8+eVXBwsI4fP64dO3Zo+fLl\nOnHihAYNGqSEhARNmjTpofOnOHjwoCTJx8dHJUqUyPS4FC4uLlq3bp2uXr2qvXv3asWKFdq4caMi\nIiI0YcIEXbt2TaNHj053/Jw5czRz5kz9/vvv+vbbb7Vlyxb16dNHkrRlyxa99tprcnNzU0hIiI4c\nOaKVK1dq9+7dOnjwoMqXL6/JkycrJCTEvL+RI0fKZDLpyy+/VEJCQpr5Pv/8cxmGoQEDBsjJySnL\nxwsAAAAAAB5PFOKsxMXFRd26dVNoaKi5KPPnn3/qp59+UosWLVSxYsUMx6fXp2rVqnrnnXckKd2i\nmCTNmjVL7u7uWYrZz89PNWvWTLPdw8NDH374oaT7V4ulZ+bMmapSpYr5dxsbG02dOlWSFBISonv3\n7mUqjmvXrkmSSpcunenYH1SsWDH5+/vLzs4u1fbChQtr2rRp8vDw0ObNmxUTE2NxfOvWrTV8+HCL\nbZMnT5ZhGJo7d66aN2+eqq1WrVqaPn26pPuvRYrKlSurY8eOunr1aprX7/bt2+bi7CuvvJLlYwUA\nAAAAAI8v27wO4J9k0KBBWrJkiRYuXKgWLVqYF2/I7CINsbGx+uGHH3TkyBFFRkbq7t27kqRLly5J\nul/Ys6R06dJq1qxZtmJOSEjQ1q1bdeDAAV29elUJCQkyDMNctEpvTltbW3Xo0CHNdnd3dxUvXlw3\nbtzQ9evXs1wcfBS//vqrduzYofDwcMXFxZmfcZeYmKjk5GSFhoamerZcihdeeMHi/iIjI7V//345\nODioc+fOFvu0bNlS0v2VcR80evRobdq0SbNmzdJLL71k3r506VLduHFD7dq1U9WqVbNzmAAAAAAA\n4DFFIc6KWrVqJR8fH61atUr/93//p8WLF8vZ2TndQs+DNmzYoIEDB+r69evp9omOjra4/cGFGbLi\nl19+Ua9evXTu3Lksz1m2bNl0V2F1dnbWjRs3dOfOnUzFUapUKUnS1atXM9X/7+Li4tSvXz+tWbMm\nw35Zff3Cw8NlGIZu376d6plxlqRc1ZeiXbt2ql69uvbt26dDhw6pfv36kqTZs2dLkkaMGJHh/gAA\nAAAAQP5DIc6KTCaTAgICNHnyZA0YMECXL1/WkCFD5ODgkOG4ixcvqlevXrp9+7bGjh2rvn37ytvb\nW05OTipUqJC2bt2q9u3bp7twwsP2b0l8fLyef/55XblyRQMHDtSwYcP0xBNPyNnZWTY2Njp16pSq\nVq2a7pwZLTyRVSlFqvDwcF2/fj3Lz4mbMGGC1qxZo2rVqun999+Xn5+fSpYsab5VtXHjxtq7d2+W\nX7+UK+qcnJzUvXv3LMVkMpk0cuRIDR8+XLNmzdKiRYu0d+9eHTlyRN7e3urUqVOW9gcAAAAAAB5/\nFOKsLCAgQO+++642bNggKXO3pW7YsEG3b99W165d9cEHH6RpP336dI7HuWvXLl25ckX16tUz30Kb\n23Omp1WrVipWrJhiYmK0ePFivfbaa1kav2LFCknS8uXLVbt27TTt2T2WChUqSLpfVFu4cGGWi4/9\n+/fXxIkTtWzZMn388ceaNWuWJGnYsGE5WsgEAAAAAACPB77tW5mnp6e6dOmiEiVKqFGjRnrqqace\nOiYqKkqS5OXllabNMAwtXbo0x+NMmdPT09Ni+zfffJPjc6bH2dlZo0aNkiS99957Cg8Pz7B/bGys\njhw5Yv49o9dvy5YtioyMzFZcHh4eql27tmJiYrR58+Ysj3d0dNTLL7+sO3fuaNq0aVq1apWKFCmi\nl19+OVvxAAAAAACAxxuFuDzw3XffKTIyUnv37s1U/+rVq0u6vypqysIMkpSUlKRJkyalWQggJ6TM\nuWPHDp04cSJV2/z587V8+fIcnzMjkyZNUuPGjXXz5k01bdrUfEXhgxITE7Vy5Ur5+vqaV6aV/ncs\nD65cKt1faGLo0KGPFNd//vMfSdLAgQMtxmQYhvbt26etW7daHD9ixAgVKlRI06dP1927d9WnT58s\n33oLAAAAAADyBwpx+UDnzp1Vv359XbhwQVWqVFGnTp3Uq1cvVapUSR988IHGjRuX43P6+vqqS5cu\niomJka+vr9q3b68+ffqoevXqGjp0qCZOnJjjc2bEzs5OW7ZsUc+ePfXXX3/J399fHh4e6ty5s/r2\n7av27durVKlS6tmzp86fPy8fHx/z2MmTJ8tkMumdd95R7dq11adPH7Vp00a1atVSxYoV1bhx42zH\n1blzZ82YMUNRUVHy9/dX5cqV1alTJ/Xt21fPPPOM3N3d1ahRI/34448Wx3t7e8vf39/8O4s0AAAA\nAABQcFGIywdsbW0VHBysiRMnqly5ctqxY4eCg4Pl6+urvXv3qkOHDrky78qVK/XRRx+patWq2rNn\nj7Zu3SpPT09t2bJFgwcPzpU5M+Lk5KTly5dr7969GjJkiFxdXbVr1y6tWLFChw8fVu3atTV16lSd\nOXNGXbp0MY/r1q2bQkJC1KZNG126dEnr16/X1atXFRgYqB9++CHd1V0za9SoUTpy5IiGDBkik8mk\nHTt2aO3atTpz5ox8fX312WefmW+ttaR9+/aSpKefflr16tV7pFgAAAAAAMDji8UaclFERESW+nt7\ne6e7cqeTk5OmTp2qqVOnWmy3NK5ly5bp7i8zcRYuXFhvvPGG3njjjUzPmdExPGy+zGrUqJEaNWqU\npTHNmjXT9u3bLbYFBwdnabslNWvW1Lx587IUU4qU5+2NHDkyW+MBAAAAAED+YDIyU6kBkCt++OEH\nPfvss/L09FRoaOgjX50HAAAAAAAeX1wRB1jZ9evXNW7cON24cUObNm2SJH344YcU4QAAAAAAKOC4\nIg6wsoiICPn4+MjW1lYVK1bUmDFjNGTIkLwOCwAAAAAA5DIKcQAAAAAAAIAVsGoqAAAAAAAAYAUU\n4gAAAAAAAAAroBAHAAAAAAAAWAGFOAAAAAAAAMAKKMQBAAAAAAAAVkAhDgAAAAAAALACCnEAAAAA\nAACAFVCIAwAAAAAAAKyAQhwAAAAAAABgBRTiAAAAAAAAACugEAcAAAAAAABYAYU4AAAAAAAAwAoo\nxAEAAAAAAABWYJvXAQCZERERIR8fH0lSeHi4vL290+3r7e2ts2fPatGiRQoICMj2XF5eXoqIiMhe\nwI+ZRtN26HL0nbwOA1ng7lxEv0xsI4n85UfkL/8jh/kb+cvfyF/+Rv7yv8c9hxHvP5fXIQCPhCvi\nAAAAAAAAACugEAcAAAAAAABYAYU4AAAAAAAAwAooxOEf4datW3r77bdVq1YtOTo6yt7eXh4eHmrS\npIkmTZqke/fuWRxnGIbmz5+v+vXry9HRUS4uLnrmmWe0d+/edOe6ffu2PvnkEzVq1Eiurq4qUqSI\nqlatqrFjx+r69etp+gcFBclkMikgIEBRUVF69dVXValSJdnb26tly5Y59RIAAAAAAIA8xmINKPDi\n4+PVtGlTHT9+XKVKlVKbNm3k6Oioy5cv648//tDPP/+s119/Xa6urmnGDhw4UEuXLlWzZs3UqVMn\nHT16VNu2bdOuXbsUEhKip556KlX/v/76Sx06dNCxY8fk5uYmPz8/FStWTIcPH9ZHH32klStXKjg4\nWF5eXmnmioyMVIMGDXTz5k01a9ZM9evXl52dXa69LgAAAAAAwLooxKHAW7VqlY4fP66OHTtq3bp1\nKly4sLktOTlZu3fvVtGiRdOMO3v2rIKDg3X8+HFVqVJFkpSUlKQhQ4Zo4cKFmjRpkrZs2WLubxiG\nevbsqWPHjunll1/Wp59+qmLFikmSEhMTNX78eH3yyScaOHCgfvzxxzTzbdy4UW3atNF3330nZ2fn\nnH4ZAAAAAABAHuPWVBR4V65ckSS1a9cuVRFOkgoVKqQWLVqke+XZzJkzzUU4SbKxsdHUqVMlSSEh\nIaluad2yZYt++ukn1a1bV3PnzjUX4STJ1tZWH374oWrWrKmdO3fq+PHjaeYqXLiw5s+fTxEOAAAA\nAIACikIcCjw/Pz9J0ocffqjFixcrKioqU+NsbW3VoUOHNNvd3d1VvHhxJSQkpHrm28aNGyVJ3bt3\nl61t2otNCxUqpObNm0uSfv755zTtvr6+qlixYqZiAwAAAAAA+Q+FOOQLJpPJ/GfDMDLsm9KeMqZl\ny5YaN26crl69qgEDBqhkyZKqWrWqBg0apHXr1ik5OdnifsqWLZvmCroUKVet3blzx7wtLCxMkvTO\nO+/IZDJZ/JkzZ44k6dq1a2n26e3tneFxAQAAAACA/I1nxCFfcHR0NP85Li4uw76xsbGSJCcnJ/O2\n999/X0OHDtWGDRu0Z88e/fTTT1q0aJEWLVokPz8/7dy5M9Uc0v0r2LIipaDXtGlTVapUKcO+Tz75\nZJptDg4OWZoPAAAAAADkLxTikC+4ubnJyclJsbGxCg0NVc2aNS32i4qKMt966unpmarN29tbI0eO\n1MiRIyVJBw4c0EsvvaQDBw7oww8/1LvvvvtIMVaoUEGS1KVLF73xxhuPtC8AAAAAAFDwcGsq8oWU\nRRUkafXq1en2W7VqlSSpePHiqlu3bob79PPz0/DhwyVJR48efeQYO3bsKElauXLlQ2+fBQAAAAAA\n/zwU4pBvjB07ViaTSUuWLNGCBQvStO/du1cTJ06UJI0ZM8b8fLc1a9Zo165daZ4Fd+/ePW3evFmS\n5OXl9cjxdenSRX5+ftq/f78GDhxo8TlwN27c0Ny5c5WYmPjI8wEAAAAAgPyFW1ORbzRv3lz/93//\np9dff12DBw/WtGnTVK9ePdna2io0NFSHDh2SYRjq3bu3xo8fbx4XEhKiGTNmqGTJkvL19VXp0qUV\nExOjX375RVevXlW5cuU0duzYR46vUKFCWrt2rZ577jl99dVXWrVqlerUqSNPT0/dvXtXYWFhOnbs\nmJKSkhQQEGBxZVUAAAAAAFBwUQlAvjJq1Cg1b95cs2bN0q5du7Rp0yYlJiaqVKlS6tKliwYOHCh/\nf/9UYwICAuTg4KA9e/boxIkTCgkJkYuLizw9PfXqq69qyJAhKlGiRI7E5+HhoV9++UVBQUFavny5\nfvvtN+3fv19ubm7y8PDQ0KFD5e/vryJFiuTIfAAAAAAAIP+gEId8p27duvryyy+z1P9hz4t7kLe3\n90Of8RYREZFum729vf7973/r3//+d6bmCwgIUEBAQKbjAwAAAAAA+ZPJ4KnyAAAAAAAAQK5jsQYA\nAAAAAADACijEAQAAAAAAAFZAIQ4AAAAAAACwAgpxAAAAAAAAgBVQiAMAAAAAAACsgEIcAAAAAAAA\nYAUU4gAAAAAAAAAroBAHAAAAAAAAWAGFOAAAAAAAAMAKKMQBAAAAAAAAVkAhDgAAAAAAALACCnEA\nAAAAAACAFVCIAwAAAAAAAKyAQhwAAAAAAABgBRTiAAAAAAAAACuwzesAAOS+RtN26HL0nbwOA1ng\n7lxEv0xsI4n85UfkL/8jh/kb+cvfyF/+Rv7yP3KYv+X3/EW8/1xeh5DruCIOj8Tb21smkynVj729\nvcqXL68uXbro+++/tzguMDBQJpNJgYGBqbYHBQXJZDIpICAg94MHAAAAAACwIq6IQ45o0qSJnnji\nCUnSrVu3dOTIEa1fv17r16/Xa6+9punTp+dxhAAAAAAAAHmLQhxyxODBg1NdxZaYmKjXXntNs2bN\n0qeffqo+ffrIz8/P3D5ixAj17t1bJUuWzINoAQAAAAAArI9bU5ErbG1t9dFHH8nZ2VmStGHDhlTt\nJUuWVLVq1SjEAQAAAACAfwwKccg1RYoUUeXKlSVJV65cSdWW3jPiHhQXF6cJEyboiSeekL29vdzd\n3TVgwABdvHjRYv/vvvtOgwcPVs2aNVW8eHEVKVJEPj4+GjRokP7880+LYwICAmQymRQUFKTw8HD1\n69dP7u7usre3V6VKlfT2228rISEhzbgH47927ZpeeeUVVahQQXZ2dqpQoYJGjhypmzdvphl37949\nffPNN+rbt6+qVasmZ2dnOTg4qGrVqho1apT++uuvdF8PAAAAAACQv1GIQ66Kjo6WJJUpUyZL427d\nuqXGjRtr7ty5qlGjhjp27CjDMLR48WI1adJEt27dSjOmZ8+e+vbbb+Xg4KDWrVurffv2KlSokBYt\nWqT69evr559/Tne+o0ePqm7dutq9e7datGih5s2b69KlS5o6dap69+6d7rjz58+rXr16Wr16tRo2\nbKh27dopJiZGs2bN0jPPPKN79+6l6n/lyhX169dPGzduVPHixdWhQwe1bt1asbGxmjlzpurWravQ\n0NAsvVYAAAAAACB/oBCHXHPy5EmFhYVJkvz9/bM0du3atSpbtqzOnj2r9evXa+3atfrjjz9Ut25d\nnT17VnPmzEkzZsmSJbp69aoOHDig1atXa926dQoNDdXs2bMVFxenIUOGyDAMi/PNmDFDI0eO1Jkz\nZ7R8+XJt27ZN+/fvl6Ojo9auXau9e/daHLdw4UK1bdtWZ8+e1erVq7Vx40YdO3ZM5cqV04EDB7Rq\n1apU/V1cXLRu3TpdvXpVe/fu1YoVK7Rx40ZFRERowoQJunbtmkaPHp2l1woAAAAAAOQPFOKQ427d\nuqWtW7eqW7duSkpK0ttvv60GDRpkaR+Ojo5atGiR+RlzklS8eHGNHz9ekrR9+/Y0Y3r16iVHR8dU\n20wmk4YPH66nn35av//+u06ePGlxvvr162vKlCmysbExb6tZs6b69euX7nySVL58ec2ePVv29vbm\nbSm3ploaV6xYMfn7+8vOzi7V9sKFC2vatGny8PDQ5s2bFRMTY3E+AAAAAACQf7FqKnLEwIEDNXDg\nwFTbbGxszM9Dy6oGDRqobNmyabZXr15dktJ9TlxoaKg2b96s0NBQxcTEKCkpSdL/nlH3559/qkaN\nGmnGderUSSaTKcvztWnTRkWLFs3yuF9//VU7duxQeHi44uLilJycLOn+arPJyckKDQ2Vr6+vxbEA\nAAAAACB/ohCHHNGkSRM98cQTkqRr165p9+7diomJ0bBhw1S5cmU1bNgwS/vz9PS0uD3lCrk7d+6k\n2p6UlKQRI0Zo3rx56d5+Kv3vmXWPOl92x8XFxalfv35as2ZNujFmFCcAAAAAAMi/uDUVOWLw4MEK\nCgpSUFCQNm7cqPPnz6tVq1aKiYlRz549FR8fn6X9FSqUtb+aM2bM0Ny5c1WmTBktXbpUERERun37\ntgzDkGEY6tOnjySlW6TL6nzZHTdhwgStWbNG1apV09q1a3Xx4kUlJCSY43z66aczjBMAAAAAAORf\nFOKQK1xcXLR8+XK5ubnp7Nmzmj59eq7Ot2LFCknSvHnz1KdPH3l5ealIkSLm9tOnT+fq/JmVEufy\n5cvVpUsXeXh4pHpe3OMSJwAAAAAAyHkU4pBrSpUqpbfffluS9PHHH+vmzZu5NldUVJQkycvLK03b\n77//rqNHj+ba3FmRUZxbtmxRZGSktUMCAAAAAABWQiEOuWr48OHy9PTUrVu39Mknn+TaPCmLI8ye\nPdu88IEkXbp0Sf3791diYmKuzZ0VKXHOnDkz1fY///xTQ4cOzYuQAAAAAACAlVCIQ66yt7dXYGCg\npPvPcUu5IiynTZw4UXZ2dvriiy9UtWpV9erVSx07dlSlSpWUkJCgrl275sq8WTV58mSZTCa98847\nql27tvr06aM2bdqoVq1aqlixoho3bpzXIQIAAAAAgFxCIQ65rn///qpRo4ZiYmL00Ucf5cocTz31\nlA4ePCh/f3/FxcVp/fr1OnPmjEaOHKm9e/eaVzHNa926dVNISIjatGmjS5cuaf369bp69aoCAwP1\nww8/qHDhwnkdIgAAAAAAyCUmg+UZAQAAAAAAgFzHFXEAAAAAAACAFVCIAwAAAAAAAKyAQhwAAAAA\nAABgBRTiAAAAAAAAACugEAcAAAAAAABYAYU4AAAAAAAAwAooxAEAAAAAAABWQCEOAAAAAAAAsAIK\ncQAAAAAAAIAVUIgDAAAAAAAArIBCHAAAAAAAAGAFFOIAAAAAAAAAK6AQBwAAAAAAAFgBhTgAAAAA\nAADACijEAQAAAAAAAFZAIQ4AAAAAAACwAgpxAAAAAAAAgBVQiAMAAAAAAACsgEIcAAAAAAAAYAUU\n4gAAAAAAAAAroBAHAAAAAAAAWAGFOAAAAAAAAMAKKMQBAAAAAAAAVkAhDiiAVq5cqZYtW6p48eJy\ndHRUnTp19OGHH+revXt5HVqBd/fuXX3//fcaPny4/Pz85O7uLjs7O7m7u8vf318bN260OC4wMFAm\nkynDnz/++CPdeQ8dOqQePXqoTJkyKlKkiHx8fDRy5EhdvXo1tw61QAsICHhoPu7cuWNx7Pbt2/Xs\ns8+qZMmScnBwULVq1fTWW28pNjY2wznJYc6IiIh4aO5Sfnbt2mUexzloXX/++admzpypgIAA1apV\nS7a2tjKZTPrPf/7z0LHWPsdCQ0MVEBCg8uXLy97eXuXLl1dAQIDCwsKydMwFSVbzl5ycrJ07d+r1\n119X48aNVb58ednZ2alkyZJq166dlixZIsMwLI4NCgp66Lm5efNmKSv7AAAgAElEQVTmdGMlf5Zl\n5xzMq/dJcphWdvKX2c/GxYsXpxrHOZizsvtdIQWfgQWDbV4HACBnvfrqq5oxY4ZsbW3VunVrOTk5\n6ccff9S4ceO0YcMGbd26VQ4ODnkdZoG1a9cude7cWZLk7u6uBg0ayNHRUSdOnNCGDRu0YcMGDRky\nRHPnzpXJZEozvk6dOqpbt67Ffbu4uFjcvmrVKvXp00eJiYny8/OTj4+PDh48qFmzZmnlypXas2eP\nnnjiiZw7yH+QJk2apPva2djYpNn26aef6vXXX5fJZFKzZs1UpkwZ7d69W9OmTdPq1au1Z88elSxZ\nMs04cphznJycNGDAgHTbT5w4oQMHDqhYsWKqX79+mnbOQev4/PPPNWPGjCyPs/Y59tNPP+mZZ55R\nfHy8nnzySTVt2lTHjx/XV199pVWrVmn79u1q1KhRtl6D/Cyr+QsLC1Pr1q0lSW5ubmrQoIGaNm2q\nsLAwbd++Xdu3b9eyZcu0evVq2dnZWdxHpUqV1LRpU4tt5cqVs7id/KUvu+egZN33SXJoWXbyl9Fn\n47lz57Rz506ZTCa1aNHCYh/OwZzxKN8V+AwsQAwABcaaNWsMSYaTk5Nx6NAh8/Zr164ZtWrVMiQZ\nY8aMycMIC74dO3YY3bt3N3bt2pWmbdmyZYaNjY0hyfjqq69StU2ePNmQZEyePDlL8128eNEoWrSo\nIcmYN2+eeXtiYqLx0ksvGZIMPz8/Izk5OVvH8081YMAAQ5KxaNGiTI85fPiwYTKZDBsbG2PTpk3m\n7XFxcUabNm0MSUb37t3TjCOH1tWxY0dDkvGvf/0r1XbOQev64osvjDfeeMNYsmSJcfLkSaNfv36G\nJGPKlCnpjrH2ORYXF2d4eHgYkowJEyakapswYYIhyahQoYIRHx+f3Zch38pq/kJDQ43WrVsbP/zw\ng5GYmJiqLTg42HB0dDQkGe+++26asYsWLTIkGQMGDMhSjOQvY9k5B639PkkO05ed/GVk2LBhhiSj\nXbt2ado4B3NWdr8r8BlYsFCIAwoQPz8/Q5Lxn//8J03b7t27DUmGvb29cfPmzTyIDoZhGC+//LIh\nyWjTpk2q7dn9x+2bb75pSDLatm2bpi0mJsZwcXExJBmbN29+lLD/cbJTiOvRo4chyRg8eHCatoiI\n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\nJETFihVL1V6uXDn17t1bvXv31u3bt/MoSgAACj6uiAMAAECuKF68uBo2bChJ+v333y32uXHjhr74\n4gt1795dNWrUkIuLi4oWLarKlStr6NChCg0NTXf/LVu2lMlkUmBgoJKTkzVr1izVq1dPjo6OcnV1\nVbt27bRz585sxX7t2jXVr19fJpNJderU0eXLl81t6S3W8PcFIC5evKhhw4bJ09NT9vb2qlChgoYN\nG6arV69mOPfmzZvVrl07ubq6ysnJSb6+vvrss8+UnJxsfi5fQEBAlo7n2LFjkqQWLVqkKcL9nYOD\nQ7ptly9f1oQJE+Tr65sqVz169NCqVauUnJycZkxcXJz++9//qkGDBnJ2dpaDg4OqVKmiUaNG6cKF\nCxbn+ftrefLkSQ0YMEAVKlRQ4cKF9fzzz6cZs2PHDvXs2VPly5eXvb293Nzc1LJlSy1atEhJSUkZ\nHjMAANbCFXEAAADINYZhSJLFAo0kzZgxQ++++64kydbWVs7OzoqPj1doaKhCQ0P1zTffaO3atWrb\ntm26cyQmJsrf318bN25U4cKFZW9vr1u3bmn79u3auXOnVq9erS5dumQ65nPnzqldu3Y6deqUmjRp\nou+//16urq5ZOOr7ha9BgwYpMjJSxYoVU3Jysi5cuKC5c+dq27ZtOnjwoMV9fvDBBxo/frz5d1dX\nVx07dkyjR4+2eCVbVv3111/ZHvv999+rT58+io2NlSTZ2dnJyclJ4eHhCg0N1apVq3Tjxo1Ux3X2\n7Fm1a9dOp0+fliTZ29vLzs5Op0+f1unTpxUUFKS1a9eqdevW6c67e/duDR06VPHx8SpWrFiaW2cT\nExM1fPhwffHFF+Ztzs7OunnzpkJCQhQSEqJly5Zp3bp1KlKkSLaPHwCAnMAVcQAAAMgVUVFR2r9/\nvySpYsWKFvt4eHhoypQpOnr0qG7fvq3r16/rzp07Onz4sDp27Ki4uDi9+OKLiouLS3eeOXPmaO/e\nvVq+fLliY2MVExOjX3/9VTVr1lRSUpJeeeWVTF8RdfLkSTVp0kSnTp1Sx44dtXXr1iwX4SRpwIAB\nql27to4dO6bo6GjFxsZqwYIFsre315kzZywuXrFr1y5NmDBBktSzZ0+dP39eN27cUHR0tD799FOt\nW7dO69aty3IskuTn5ydJ2rNnj2bPnp3lK8T279+v7t27KzY2Vo0aNdKuXbvM+YqJidG2bdvUu3dv\n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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112ca0208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "flatframe['rankings101'] = flatframe['ranking'].map(lambda x: 101 -x)\n",
    "\n",
    "top20 = flatframe.groupby('band_singer').sum().sort_values('rankings101', ascending = False).rankings101[:20]\n",
    "\n",
    "sns.reset_defaults()\n",
    "\n",
    "with sns.plotting_context(\"poster\"):\n",
    "    ax = plt.gca()\n",
    "    top20.plot(kind=\"barh\")\n",
    "    plt.grid(axis = 'x', color ='white', linestyle='-')\n",
    "    ax.tick_params(axis='both', which='both',length=0)\n",
    "    sns.despine(left=True, bottom=True)\n",
    "    plt.title(\"Top 20 Singers from 1992 to 2014\")\n",
    "    plt.ylabel(\"Artist\")\n",
    "    plt.xlabel(\"Ranking Score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.7 Do you notice any major differences when you change the metric?\n",
    "\n",
    "How have the singers at the top shifted places? Why do you think this happens?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Various artists have shifted ranking using the different methodologies. This happens because some artists produce a lot of good songs, but those songs are not necessirly the best songs for that year. Some artists like Rihanna who is at the top of both charts, produce many excellent songs that are at the top of the charts. On the other hand, R. Kelly and T.I produce a lot of songs on that make it on the top 100 list, but they are not all excellent songs at the top of the charts. Finally, artists like Bruno Mars have a few really excellent songs so they rank on the second methodology but they don't have many songs so they do not rank well on the first methodology. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Q2. Scraping and Constructing: Information about Artists, Bands and Genres from Wikipedia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our next job is to use those band/singer urls we collected under `flatframe.url` and get information about singers and/or bands."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scrape information about artists from wikipedia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We wish to fetch information about the singers or groups for all the winning songs in a list of years.\n",
    "\n",
    "Here we show a function that fetches information about a singer or group from their url on wikipedia. We create a cache object `urlcache` that will avoid redundant HTTP requests (e.g. an artist might have multiple singles on a single year, or be on the list over a span of years). Once we have fetched information about an artist, we don't need to do it again. The caching also helps if the network goes down, or the target website is having some problems. You simply need to run the `get_page` function below again, and the `urlcache` dictionary will continue to be filled.\n",
    "\n",
    "If the request gets an HTTP return code different from 200, (such as a 404 not found or 500 Internal Server Error) the cells for that URL will have a value of 1; and if the request completely fails (e.g. no network connection) the cell will have a value of 2. This will allow you to analyse the failed requests.\n",
    "\n",
    "Notice that we have wrapped the call in whats called _an exception block_. We try to make the request. If it fails entirely, or returns a HTTP code thats not 200, we set the status to 2 and 1 respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "urlcache={}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def get_page(url):\n",
    "    # Check if URL has already been visited.\n",
    "    if (url not in urlcache) or (urlcache[url]==1) or (urlcache[url]==2):\n",
    "        time.sleep(1)\n",
    "        # try/except blocks are used whenever the code could generate an exception (e.g. division by zero).\n",
    "        # In this case we don't know if the page really exists, or even if it does, if we'll be able to reach it.\n",
    "        try:\n",
    "            r = requests.get(\"http://en.wikipedia.org%s\" % url)\n",
    "\n",
    "            if r.status_code == 200:\n",
    "                urlcache[url] = r.text\n",
    "            else:\n",
    "                urlcache[url] = 1\n",
    "        except:\n",
    "            urlcache[url] = 2\n",
    "    return urlcache[url]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We sort the `flatframe` by year, ascending, first. Think why."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "flatframe=flatframe.sort_values('year')\n",
    "flatframe.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pulling and saving the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# DO NOT RERUN THIS CELL WHEN SUBMITTING\n",
    "# Here we are populating the url cache\n",
    "# subsequent calls to this cell should be very fast, since Python won't\n",
    "# need to fetch the page from the web server.\n",
    "# NOTE this function will take quite some time to run (about 30 mins for me), since we sleep 1 second before\n",
    "# making a request. If you run it again it will be almost instantaneous, save requests that might have failed\n",
    "# (you will need to run it again if requests fail..see cell below for how to test this)\n",
    "flatframe[\"url\"].apply(get_page)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You may have to run this function again and again, in case there were network problems. Note that, because there is a \"global\" cache, it will take less time each time you run it. Also note that this function is designed to be run again and again: it attempts to make sure that there are no unresolved pages remaining. Let us make sure of this: *the sum below should be 0, and the boolean True.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# DO NOT RERUN THIS CELL WHEN SUBMITTING\n",
    "print(\"Number of bad requests:\",np.sum([(urlcache[k]==1) or (urlcache[k]==2) for k in urlcache])) # no one or 0's)\n",
    "print(\"Did we get all urls?\", len(flatframe.url.unique())==len(urlcache)) # we got all of the urls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's save the `urlcache` to disk, just in case we need it again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# DO NOT RERUN THIS CELL WHEN SUBMITTING\n",
    "with open(\"data/artistinfo.json\",\"w\") as fd:\n",
    "    json.dump(urlcache, fd)\n",
    "del urlcache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# RERUN WHEN SUBMITTING\n",
    "with open(\"artistinfo.json\") as json_file:\n",
    "    urlcache = json.load(json_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1 Extract information about singers and bands"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From each page we collected about a singer or a band, extract the following information:\n",
    "\n",
    "1. If the page has the text \"Born\" in the sidebar on the right, extract the element with the class `.bday`. If the page doesn't contain \"Born\", store `False`.  Store either of these into the variable `born`. We want to analyze the artist's age.\n",
    "\n",
    "2. If the text \"Years active\" is found, but no \"born\", assume a band. Store into the variable `ya` the value of the next table cell corresponding to this, or `False` if the text is not found.\n",
    "\n",
    "Put this all into a function `singer_band_info` which takes the singer/band url as argument and returns a dictionary `dict(url=url, born=born, ya=ya)`.\n",
    "\n",
    "The information can be found on the sidebar on each such wikipedia page, as the example here shows:\n",
    "\n",
    "![sandg](https://raw.githubusercontent.com/cs109/a-2017/master/hwassets/images/sandg.png).\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write the function `singer_band_info` according to the following specification:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function\n",
    "--------\n",
    "singer_band_info\n",
    "\n",
    "Inputs\n",
    "------\n",
    "url: the url\n",
    "page_text: the text associated with the url\n",
    "   \n",
    "Returns\n",
    "-------\n",
    "A dictionary with the following data:\n",
    "    url: copy the input argument url into this value\n",
    "    born: the artist's birthday\n",
    "    ya: years active variable\n",
    "\n",
    "Notes\n",
    "-----\n",
    "See description above. Also note that some of the genres urls might require a \n",
    "bit of care and special handling.\n",
    "\"\"\"\n",
    "\n",
    "def singer_band_info (url, page_text):\n",
    "    soup = BeautifulSoup(page_text, 'html.parser')\n",
    "    # Find the table with class-types 'sortable' and 'wikitable'\n",
    "    dfinder = lambda tag: tag.name=='table' and tag.get('class') == ['wikitable', 'sortable']\n",
    "    table_songs = soup.find_all(dfinder)\n",
    "    # Extract rows from table_demographics\n",
    "    rows = [row for row in table_songs[0].find_all(\"tr\")]\n",
    "    \n",
    "    \n",
    "    page_text = urlcache['/wiki/Celine_Dion']\n",
    "    soup = BeautifulSoup(page_text, 'html.parser')\n",
    "    # Find the table with class-types 'sortable' and 'wikitable'\n",
    "    dfinder = lambda tag: tag.name=='span' and tag.get('class') == ['bday']\n",
    "    table_songs = soup.find_all(dfinder)\n",
    "    # Extract rows from table_demographics\n",
    "    #rows = [ table_songs[0].find_all(lambda tag: tag.name=='span' and tag.get('class') == ['bday'])]\n",
    "    #rows.find(lambda tag: tag.name=='span' and tag.get('class') == ['bday'])\n",
    "    table_songs\n",
    "    page_text = urlcache['/wiki/Journey_(band)']\n",
    "    soup = BeautifulSoup(page_text, 'html.parser')\n",
    "    dfinder = lambda tag: tag.name=='table' and tag.get('class') == ['infobox', 'vcard', 'plainlist']\n",
    "    table_songs = soup.find_all(dfinder)\n",
    "    rows = [row.find('td').text for row in table_songs[0].find_all(lambda tag: tag.name=='tr' and 'Years active' in tag.text)][0]\n",
    "    rows\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1968-03-30'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_text = urlcache['/wiki/Celine_Dion']\n",
    "soup = BeautifulSoup(page_text, 'html.parser')\n",
    "# Find the table with class-types 'sortable' and 'wikitable'\n",
    "dfinder = lambda tag: tag.name=='span' and tag.get('class') == ['bday']\n",
    "table_songs = soup.find_all(dfinder)[0].text\n",
    "# Extract rows from table_demographics\n",
    "#rows = [ table_songs[0].find_all(lambda tag: tag.name=='span' and tag.get('class') == ['bday'])]\n",
    "#rows.find(lambda tag: tag.name=='span' and tag.get('class') == ['bday'])\n",
    "table_songs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1973–present'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_text = urlcache['/wiki/Journey_(band)']\n",
    "soup = BeautifulSoup(page_text, 'html.parser')\n",
    "dfinder = lambda tag: tag.name=='table' and tag.get('class') == ['infobox', 'vcard', 'plainlist']\n",
    "table_songs = soup.find_all(dfinder)\n",
    "rows = [row.find('td').text for row in table_songs[0].find_all(lambda tag: tag.name=='tr' and 'Years active' in tag.text)][0]\n",
    "rows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2  Merging this information in"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Iterate over the items in the singer-group dictionary cache `urlcache`, run the above function, and create a dataframe from there with columns `url`, `born`, and `ya`. Merge this dataframe on the `url` key with `flatframe`, creating a rather wide dataframe that we shall call `largedf`. It should look something like this:\n",
    "\n",
    "![](https://raw.githubusercontent.com/cs109/a-2017/master/hwassets/images/HW1SC3.png)\n",
    "\n",
    "Notice how the `born` and `ya` and `url` are repeated every time a different song from a given band is represented in a row."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.3 What is the age at which singers achieve their top ranking?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot a histogram of the age at which singers achieve their top ranking. What conclusions can you draw from this distribution of ages?\n",
    "\n",
    "*HINT: You will need to do some manipulation of the `born` column, and find the song for which a band or an artist achieves their top ranking. You will then need to put these rows together into another dataframe or array to make the plot.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4 At what year since inception do bands reach their top rankings?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a similar calculation to plot a histogram of the years since inception at which bands reach their top ranking. What conclusions can you draw?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
